ASTree
|-- VarDecl, BaseType: const Float, line: 2
|   |-- DefNode
|   |   `-- Var: LeftValueExpr RADIUS
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 5.5
|   |-- DefNode
|   |   `-- Var: LeftValueExpr PI
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 3.14159
|   `-- DefNode
|       `-- Var: LeftValueExpr EPS
|       `-- Init: InitSingle
|           `-- Const Float: 1e-06
|-- VarDecl, BaseType: const Float, line: 5
|   |-- DefNode
|   |   `-- Var: LeftValueExpr PI_HEX
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 3.14159
|   `-- DefNode
|       `-- Var: LeftValueExpr HEX2
|       `-- Init: InitSingle
|           `-- Const Float: 0.078125
|-- VarDecl, BaseType: const Float, line: 8
|   |-- DefNode
|   |   `-- Var: LeftValueExpr FACT
|   |   `-- Init: InitSingle
|   |       `-- UnaryExpr Sub
|   |           `-- Const Float: 33000
|   |-- DefNode
|   |   `-- Var: LeftValueExpr EVAL1
|   |   `-- Init: InitSingle
|   |       `-- BinaryExpr Mul
|   |           |-- BinaryExpr Mul
|   |           |   |-- LeftValueExpr PI
|   |           |   `-- LeftValueExpr RADIUS
|   |           `-- LeftValueExpr RADIUS
|   |-- DefNode
|   |   `-- Var: LeftValueExpr EVAL2
|   |   `-- Init: InitSingle
|   |       `-- BinaryExpr Mul
|   |           |-- BinaryExpr Mul
|   |           |   |-- Const Int: 2
|   |           |   `-- LeftValueExpr PI_HEX
|   |           `-- LeftValueExpr RADIUS
|   `-- DefNode
|       `-- Var: LeftValueExpr EVAL3
|       `-- Init: InitSingle
|           `-- BinaryExpr Mul
|               |-- BinaryExpr Mul
|               |   |-- LeftValueExpr PI
|               |   `-- Const Int: 2
|               `-- LeftValueExpr RADIUS
|-- VarDecl, BaseType: const Float, line: 11
|   |-- DefNode
|   |   `-- Var: LeftValueExpr CONV1
|   |   `-- Init: InitSingle
|   |       `-- Const Int: 233
|   `-- DefNode
|       `-- Var: LeftValueExpr CONV2
|       `-- Init: InitSingle
|           `-- Const Int: 4095
|-- VarDecl, BaseType: const Int, line: 12
|   |-- DefNode
|   |   `-- Var: LeftValueExpr MAX
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 1e+09
|   |-- DefNode
|   |   `-- Var: LeftValueExpr TWO
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 2.9
|   |-- DefNode
|   |   `-- Var: LeftValueExpr THREE
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 3.2
|   `-- DefNode
|       `-- Var: LeftValueExpr FIVE
|       `-- Init: InitSingle
|           `-- BinaryExpr Add
|               |-- LeftValueExpr TWO
|               `-- LeftValueExpr THREE
|-- FuncDecl @Name: float_abs -> @RetType: Float, line: 15
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 15
|           |-- IfStmt, line: 16
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- Const Int: 0
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 16
|           |   |       `-- UnaryExpr Sub
|           |   |           `-- LeftValueExpr x
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 17
|               `-- LeftValueExpr x
|-- FuncDecl @Name: circle_area -> @RetType: Float, line: 21
|   |-- Params:
|   |   `-- Int radius
|   `-- Body:
|       `-- BlockStmt, line: 21
|           `-- ReturnStmt, line: 22
|               `-- BinaryExpr Div
|                   |-- BinaryExpr Add
|                   |   |-- BinaryExpr Mul
|                   |   |   |-- BinaryExpr Mul
|                   |   |   |   |-- LeftValueExpr PI
|                   |   |   |   `-- LeftValueExpr radius
|                   |   |   `-- LeftValueExpr radius
|                   |   `-- BinaryExpr Mul
|                   |       |-- BinaryExpr Mul
|                   |       |   |-- LeftValueExpr radius
|                   |       |   `-- LeftValueExpr radius
|                   |       `-- LeftValueExpr PI
|                   `-- Const Int: 2
|-- FuncDecl @Name: float_eq -> @RetType: Int, line: 26
|   |-- Params:
|   |   |-- Float a
|   |   `-- Float b
|   `-- Body:
|       `-- BlockStmt, line: 26
|           `-- IfStmt, line: 27
|               |-- Condition:
|               |   `-- BinaryExpr Lt
|               |       |-- FuncCallExpr float_abs
|               |       |   `-- Arg0 = BinaryExpr Sub
|               |       |       |-- LeftValueExpr a
|               |       |       `-- LeftValueExpr b
|               |       `-- LeftValueExpr EPS
|               |-- Thenbody:
|               |   `-- BlockStmt, line: 27
|               |       `-- ReturnStmt, line: 28
|               |           `-- BinaryExpr Div
|               |               |-- BinaryExpr Mul
|               |               |   |-- Const Int: 1
|               |               |   `-- Const Float: 2
|               |               `-- Const Int: 2
|               `-- Elsebody:
|                   `-- BlockStmt, line: 29
|                       `-- ReturnStmt, line: 30
|                           `-- Const Int: 0
|-- FuncDecl @Name: error -> @RetType: Void, line: 34
|   |-- Params:
|   |       None
|   `-- Body:
|       `-- BlockStmt, line: 34
|           |-- ExprStmt line: 35
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 101
|           |-- ExprStmt line: 36
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 114
|           |-- ExprStmt line: 37
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 114
|           |-- ExprStmt line: 38
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 111
|           |-- ExprStmt line: 39
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 114
|           `-- ExprStmt line: 40
|               `-- FuncCallExpr putch
|                   `-- Arg0 = Const Int: 10
|-- FuncDecl @Name: ok -> @RetType: Void, line: 43
|   |-- Params:
|   |       None
|   `-- Body:
|       `-- BlockStmt, line: 43
|           |-- ExprStmt line: 44
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 111
|           |-- ExprStmt line: 45
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 107
|           `-- ExprStmt line: 46
|               `-- FuncCallExpr putch
|                   `-- Arg0 = Const Int: 10
|-- FuncDecl @Name: assert -> @RetType: Void, line: 49
|   |-- Params:
|   |   `-- Int cond
|   `-- Body:
|       `-- BlockStmt, line: 49
|           `-- IfStmt, line: 50
|               |-- Condition:
|               |   `-- UnaryExpr Not
|               |       `-- LeftValueExpr cond
|               |-- Thenbody:
|               |   `-- BlockStmt, line: 50
|               |       `-- ExprStmt line: 51
|               |           `-- FuncCallExpr error
|               |               `-- No args
|               `-- Elsebody:
|                   `-- BlockStmt, line: 52
|                       `-- ExprStmt line: 53
|                           `-- FuncCallExpr ok
|                               `-- No args
`-- FuncDecl @Name: main -> @RetType: Int, line: 57
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 57
            |-- ExprStmt line: 58
            |   `-- FuncCallExpr assert
            |       `-- Arg0 = UnaryExpr Not
            |           `-- FuncCallExpr float_eq
            |               |-- Arg0 = LeftValueExpr HEX2
            |               `-- Arg1 = LeftValueExpr FACT
            |-- ExprStmt line: 59
            |   `-- FuncCallExpr assert
            |       `-- Arg0 = UnaryExpr Not
            |           `-- FuncCallExpr float_eq
            |               |-- Arg0 = LeftValueExpr EVAL1
            |               `-- Arg1 = LeftValueExpr EVAL2
            |-- ExprStmt line: 60
            |   `-- FuncCallExpr assert
            |       `-- Arg0 = FuncCallExpr float_eq
            |           |-- Arg0 = LeftValueExpr EVAL2
            |           `-- Arg1 = LeftValueExpr EVAL3
            |-- ExprStmt line: 61
            |   `-- FuncCallExpr assert
            |       `-- Arg0 = FuncCallExpr float_eq
            |           |-- Arg0 = FuncCallExpr circle_area
            |           |   Arg0 = `-- Arg0 = LeftValueExpr RADIUS
            |           `-- Arg1 = FuncCallExpr circle_area
            |               `-- Arg0 = LeftValueExpr FIVE
            |-- ExprStmt line: 63
            |   `-- FuncCallExpr assert
            |       `-- Arg0 = UnaryExpr Not
            |           `-- FuncCallExpr float_eq
            |               |-- Arg0 = LeftValueExpr CONV1
            |               `-- Arg1 = LeftValueExpr CONV2
            |-- IfStmt, line: 66
            |   |-- Condition:
            |   |   `-- Const Float: 1.5
            |   |-- Thenbody:
            |   |   `-- ExprStmt line: 66
            |   |       `-- FuncCallExpr ok
            |   |           `-- No args
            |   `-- Elsebody:
            |       `-- None
            |-- IfStmt, line: 67
            |   |-- Condition:
            |   |   `-- UnaryExpr Not
            |   |       `-- UnaryExpr Not
            |   |           `-- Const Float: 3.3
            |   |-- Thenbody:
            |   |   `-- ExprStmt line: 67
            |   |       `-- FuncCallExpr ok
            |   |           `-- No args
            |   `-- Elsebody:
            |       `-- None
            |-- IfStmt, line: 68
            |   |-- Condition:
            |   |   `-- BinaryExpr And
            |   |       |-- Const Float: 0
            |   |       `-- Const Int: 3
            |   |-- Thenbody:
            |   |   `-- ExprStmt line: 68
            |   |       `-- FuncCallExpr error
            |   |           `-- No args
            |   `-- Elsebody:
            |       `-- None
            |-- IfStmt, line: 69
            |   |-- Condition:
            |   |   `-- BinaryExpr Or
            |   |       |-- Const Int: 0
            |   |       `-- Const Float: 0.3
            |   |-- Thenbody:
            |   |   `-- ExprStmt line: 69
            |   |       `-- FuncCallExpr ok
            |   |           `-- No args
            |   `-- Elsebody:
            |       `-- None
            |-- VarDecl, BaseType: Int, line: 72
            |   |-- DefNode
            |   |   `-- Var: LeftValueExpr i
            |   |   `-- Init: InitSingle
            |   |       `-- Const Int: 1
            |   `-- DefNode
            |       `-- Var: LeftValueExpr p
            |       `-- Init: InitSingle
            |           `-- Const Int: 0
            |-- VarDecl, BaseType: Float, line: 73
            |   `-- DefNode
            |       `-- Var: LeftValueExpr arr[Dim0]
            |           `-- Dim0 = Const Int: 10
            |       `-- Init: InitMulti
            |           |-- InitSingle
            |           |   `-- Const Float: 1
            |           `-- InitSingle
            |               `-- Const Int: 2
            |-- VarDecl, BaseType: Int, line: 74
            |   `-- DefNode
            |       `-- Var: LeftValueExpr len
            |       `-- Init: InitSingle
            |           `-- FuncCallExpr getfarray
            |               `-- Arg0 = LeftValueExpr arr
            |-- WhileStmt, line: 75
            |   |-- Cond:
            |   |   `-- BinaryExpr Lt
            |   |       |-- LeftValueExpr i
            |   |       `-- LeftValueExpr MAX
            |   `-- Body:
            |       `-- BlockStmt, line: 75
            |           |-- VarDecl, BaseType: Float, line: 76
            |           |   `-- DefNode
            |           |       `-- Var: LeftValueExpr input
            |           |       `-- Init: InitSingle
            |           |           `-- FuncCallExpr getfloat
            |           |               `-- No args
            |           |-- VarDecl, BaseType: Float, line: 77
            |           |   |-- DefNode
            |           |   |   `-- Var: LeftValueExpr area
            |           |   |   `-- Init: InitSingle
            |           |   |       `-- BinaryExpr Mul
            |           |   |           |-- BinaryExpr Mul
            |           |   |           |   |-- LeftValueExpr PI
            |           |   |           |   `-- LeftValueExpr input
            |           |   |           `-- LeftValueExpr input
            |           |   `-- DefNode
            |           |       `-- Var: LeftValueExpr area_trunc
            |           |       `-- Init: InitSingle
            |           |           `-- FuncCallExpr circle_area
            |           |               `-- Arg0 = LeftValueExpr input
            |           |-- ExprStmt line: 78
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr arr[Dim0]
            |           |       |   `-- Dim0 = LeftValueExpr p
            |           |       `-- BinaryExpr Add
            |           |           |-- LeftValueExpr arr[Dim0]
            |           |           |   `-- Dim0 = LeftValueExpr p
            |           |           `-- LeftValueExpr input
            |           |-- ExprStmt line: 80
            |           |   `-- FuncCallExpr putfloat
            |           |       `-- Arg0 = LeftValueExpr area
            |           |-- ExprStmt line: 81
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 32
            |           |-- ExprStmt line: 82
            |           |   `-- FuncCallExpr putint
            |           |       `-- Arg0 = LeftValueExpr area_trunc
            |           |-- ExprStmt line: 83
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 10
            |           |-- ExprStmt line: 85
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr i
            |           |       `-- BinaryExpr Mul
            |           |           |-- LeftValueExpr i
            |           |           `-- UnaryExpr Sub
            |           |               `-- UnaryExpr Sub
            |           |                   `-- Const Float: 10
            |           `-- ExprStmt line: 86
            |               `-- BinaryExpr Assign
            |                   |-- LeftValueExpr p
            |                   `-- BinaryExpr Add
            |                       |-- LeftValueExpr p
            |                       `-- Const Int: 1
            |-- ExprStmt line: 88
            |   `-- FuncCallExpr putfarray
            |       |-- Arg0 = LeftValueExpr len
            |       `-- Arg1 = LeftValueExpr arr
            `-- ReturnStmt, line: 89
                `-- Const Int: 0
