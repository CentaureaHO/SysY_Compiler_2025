ASTree
|-- VarDecl, BaseType: Int, line: 1
|   `-- DefNode
|       |-- Var: LeftValueExpr N
|       `-- Init: no initializer
|-- VarDecl, BaseType: Int, line: 3
|   `-- DefNode
|       |-- Var: LeftValueExpr newline
|       `-- Init: no initializer
|-- FuncDecl @Name: split -> @RetType: Int, line: 5
|   |-- Params:
|   |   |-- Int n
|   |   `-- Int a[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   `-- Body:
|       `-- BlockStmt, line: 6
|           |-- VarDecl, BaseType: Int, line: 7
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr i
|           |       `-- Init: no initializer
|           |-- ExprStmt line: 8
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr i
|           |       `-- BinaryExpr Sub
|           |           |-- LeftValueExpr N
|           |           `-- Const Int: 1
|           |-- WhileStmt, line: 9
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Neq
|           |   |       |-- LeftValueExpr i
|           |   |       `-- UnaryExpr Sub
|           |   |           `-- Const Int: 1
|           |   `-- Body:
|           |       `-- BlockStmt, line: 10
|           |           |-- ExprStmt line: 11
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr a[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- BinaryExpr Mod
|           |           |           |-- LeftValueExpr n
|           |           |           `-- Const Int: 10
|           |           |-- ExprStmt line: 12
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr n
|           |           |       `-- BinaryExpr Div
|           |           |           |-- LeftValueExpr n
|           |           |           `-- Const Int: 10
|           |           `-- ExprStmt line: 13
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Sub
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 17
|               `-- Const Int: 0
`-- FuncDecl @Name: main -> @RetType: Int, line: 20
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 21
            |-- ExprStmt line: 22
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr N
            |       `-- Const Int: 4
            |-- ExprStmt line: 23
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr newline
            |       `-- Const Int: 10
            |-- VarDecl, BaseType: Int, line: 24
            |   `-- DefNode
            |       |-- Var: LeftValueExpr i
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 25
            |   `-- DefNode
            |       |-- Var: LeftValueExpr m
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 26
            |   `-- DefNode
            |       |-- Var: LeftValueExpr b[Dim0]
            |       |   Var: `-- Dim0 = Const Int: 4
            |       `-- Init: no initializer
            |-- ExprStmt line: 27
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr m
            |       `-- Const Int: 1478
            |-- ExprStmt line: 28
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr m
            |       `-- FuncCallExpr split
            |           |-- Arg0 = LeftValueExpr m
            |           `-- Arg1 = LeftValueExpr b
            |-- VarDecl, BaseType: Int, line: 29
            |   `-- DefNode
            |       |-- Var: LeftValueExpr t
            |       `-- Init: no initializer
            |-- ExprStmt line: 30
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr i
            |       `-- Const Int: 0
            |-- WhileStmt, line: 31
            |   |-- Cond:
            |   |   `-- BinaryExpr Lt
            |   |       |-- LeftValueExpr i
            |   |       `-- Const Int: 4
            |   `-- Body:
            |       `-- BlockStmt, line: 32
            |           |-- ExprStmt line: 33
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr t
            |           |       `-- LeftValueExpr b[Dim0]
            |           |           `-- Dim0 = LeftValueExpr i
            |           |-- ExprStmt line: 34
            |           |   `-- FuncCallExpr putint
            |           |       `-- Arg0 = LeftValueExpr t
            |           |-- ExprStmt line: 35
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = LeftValueExpr newline
            |           `-- ExprStmt line: 36
            |               `-- BinaryExpr Assign
            |                   |-- LeftValueExpr i
            |                   `-- BinaryExpr Add
            |                       |-- LeftValueExpr i
            |                       `-- Const Int: 1
            `-- ReturnStmt, line: 39
                `-- Const Int: 0
