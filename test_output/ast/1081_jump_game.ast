ASTree
|-- FuncDecl @Name: canJump -> @RetType: Int, line: 1
|   |-- Params:
|   |   |-- Int nums[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   `-- Int n
|   `-- Body:
|       `-- BlockStmt, line: 1
|           |-- IfStmt, line: 2
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Eq
|           |   |       |-- LeftValueExpr n
|           |   |       `-- Const Int: 1
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 3
|           |   |       `-- Const Int: 1
|           |   `-- Elsebody:
|           |       `-- None
|           |-- IfStmt, line: 4
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr nums[Dim0]
|           |   |       |   `-- Dim0 = Const Int: 0
|           |   |       `-- BinaryExpr Sub
|           |   |           |-- LeftValueExpr n
|           |   |           `-- Const Int: 2
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 5
|           |   |       `-- Const Int: 1
|           |   `-- Elsebody:
|           |       `-- None
|           |-- VarDecl, BaseType: Int, line: 6
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr dp[Dim0]
|           |       |   Var: `-- Dim0 = Const Int: 10
|           |       `-- Init: no initializer
|           |-- VarDecl, BaseType: Int, line: 7
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr i
|           |       `-- Init: no initializer
|           |-- ExprStmt line: 8
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr i
|           |       `-- Const Int: 0
|           |-- WhileStmt, line: 9
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr i
|           |   |       `-- BinaryExpr Sub
|           |   |           |-- LeftValueExpr n
|           |   |           `-- Const Int: 1
|           |   `-- Body:
|           |       `-- BlockStmt, line: 9
|           |           |-- ExprStmt line: 10
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr dp[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- Const Int: 0
|           |           `-- ExprStmt line: 11
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Add
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           |-- ExprStmt line: 13
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr dp[Dim0]
|           |       |   `-- Dim0 = BinaryExpr Sub
|           |       |       |-- LeftValueExpr n
|           |       |       `-- Const Int: 1
|           |       `-- Const Int: 1
|           |-- ExprStmt line: 14
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr i
|           |       `-- BinaryExpr Sub
|           |           |-- LeftValueExpr n
|           |           `-- Const Int: 2
|           |-- WhileStmt, line: 15
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr i
|           |   |       `-- UnaryExpr Sub
|           |   |           `-- Const Int: 1
|           |   `-- Body:
|           |       `-- BlockStmt, line: 15
|           |           |-- VarDecl, BaseType: Int, line: 16
|           |           |   `-- DefNode
|           |           |       |-- Var: LeftValueExpr j
|           |           |       `-- Init: no initializer
|           |           |-- IfStmt, line: 17
|           |           |   |-- Condition:
|           |           |   |   `-- BinaryExpr Lt
|           |           |   |       |-- LeftValueExpr nums[Dim0]
|           |           |   |       |   `-- Dim0 = LeftValueExpr i
|           |           |   |       `-- BinaryExpr Sub
|           |           |   |           |-- BinaryExpr Sub
|           |           |   |           |   |-- LeftValueExpr n
|           |           |   |           |   `-- Const Int: 1
|           |           |   |           `-- LeftValueExpr i
|           |           |   |-- Thenbody:
|           |           |   |   `-- BlockStmt, line: 17
|           |           |   |       `-- ExprStmt line: 18
|           |           |   |           `-- BinaryExpr Assign
|           |           |   |               |-- LeftValueExpr j
|           |           |   |               `-- LeftValueExpr nums[Dim0]
|           |           |   |                   `-- Dim0 = LeftValueExpr i
|           |           |   `-- Elsebody:
|           |           |       `-- ExprStmt line: 21
|           |           |           `-- BinaryExpr Assign
|           |           |               |-- LeftValueExpr j
|           |           |               `-- BinaryExpr Sub
|           |           |                   |-- BinaryExpr Sub
|           |           |                   |   |-- LeftValueExpr n
|           |           |                   |   `-- Const Int: 1
|           |           |                   `-- LeftValueExpr i
|           |           |-- WhileStmt, line: 22
|           |           |   |-- Cond:
|           |           |   |   `-- BinaryExpr Gt
|           |           |   |       |-- LeftValueExpr j
|           |           |   |       `-- UnaryExpr Sub
|           |           |   |           `-- Const Int: 1
|           |           |   `-- Body:
|           |           |       `-- BlockStmt, line: 22
|           |           |           |-- IfStmt, line: 23
|           |           |           |   |-- Condition:
|           |           |           |   |   `-- BinaryExpr Neq
|           |           |           |   |       |-- LeftValueExpr dp[Dim0]
|           |           |           |   |       |   `-- Dim0 = BinaryExpr Add
|           |           |           |   |       |       |-- LeftValueExpr i
|           |           |           |   |       |       `-- LeftValueExpr j
|           |           |           |   |       `-- Const Int: 0
|           |           |           |   |-- Thenbody:
|           |           |           |   |   `-- BlockStmt, line: 23
|           |           |           |   |       `-- ExprStmt line: 24
|           |           |           |   |           `-- BinaryExpr Assign
|           |           |           |   |               |-- LeftValueExpr dp[Dim0]
|           |           |           |   |               |   `-- Dim0 = LeftValueExpr i
|           |           |           |   |               `-- Const Int: 1
|           |           |           |   `-- Elsebody:
|           |           |           |       `-- None
|           |           |           `-- ExprStmt line: 26
|           |           |               `-- BinaryExpr Assign
|           |           |                   |-- LeftValueExpr j
|           |           |                   `-- BinaryExpr Sub
|           |           |                       |-- LeftValueExpr j
|           |           |                       `-- Const Int: 1
|           |           `-- ExprStmt line: 28
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Sub
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 31
|               `-- LeftValueExpr dp[Dim0]
|                   `-- Dim0 = Const Int: 0
`-- FuncDecl @Name: main -> @RetType: Int, line: 33
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 33
            |-- VarDecl, BaseType: Int, line: 34
            |   `-- DefNode
            |       |-- Var: LeftValueExpr res
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 35
            |   `-- DefNode
            |       |-- Var: LeftValueExpr a[Dim0]
            |       |   Var: `-- Dim0 = Const Int: 10
            |       `-- Init: no initializer
            |-- ExprStmt line: 36
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 0
            |       `-- Const Int: 3
            |-- ExprStmt line: 36
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 1
            |       `-- Const Int: 3
            |-- ExprStmt line: 36
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 2
            |       `-- Const Int: 9
            |-- ExprStmt line: 36
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 3
            |       `-- Const Int: 0
            |-- ExprStmt line: 36
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 4
            |       `-- Const Int: 0
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 5
            |       `-- Const Int: 1
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 6
            |       `-- Const Int: 1
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 7
            |       `-- Const Int: 5
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 8
            |       `-- Const Int: 7
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 9
            |       `-- Const Int: 8
            |-- ExprStmt line: 38
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr res
            |       `-- Const Int: 10
            |-- ExprStmt line: 39
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr res
            |       `-- FuncCallExpr canJump
            |           |-- Arg0 = LeftValueExpr a
            |           `-- Arg1 = LeftValueExpr res
            `-- ReturnStmt, line: 40
                `-- LeftValueExpr res
