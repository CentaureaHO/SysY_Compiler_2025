ASTree
|-- VarDecl, BaseType: Int, line: 1
|   `-- DefNode
|       `-- Var: LeftValueExpr s
|       `-- Init: InitSingle
|           `-- Const Int: 0
|-- FuncDecl @Name: get_ans_se -> @RetType: Int, line: 3
|   |-- Params:
|   |   |-- Int ans
|   |   |-- Int v0
|   |   `-- Int v1
|   `-- Body:
|       `-- BlockStmt, line: 3
|           |-- VarDecl, BaseType: Int, line: 4
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr v
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 0
|           |-- IfStmt, line: 5
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Eq
|           |   |       |-- LeftValueExpr v0
|           |   |       `-- LeftValueExpr v1
|           |   |-- Thenbody:
|           |   |   `-- ExprStmt line: 5
|           |   |       `-- BinaryExpr Assign
|           |   |           |-- LeftValueExpr v
|           |   |           `-- Const Int: 1
|           |   `-- Elsebody:
|           |       `-- None
|           |-- ExprStmt line: 6
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr ans
|           |       `-- BinaryExpr Mul
|           |           |-- LeftValueExpr ans
|           |           `-- Const Int: 2
|           |-- ExprStmt line: 7
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr ans
|           |       `-- BinaryExpr Add
|           |           |-- LeftValueExpr ans
|           |           `-- LeftValueExpr v
|           |-- ExprStmt line: 8
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr s
|           |       `-- BinaryExpr Add
|           |           |-- LeftValueExpr s
|           |           `-- LeftValueExpr ans
|           `-- ReturnStmt, line: 9
|               `-- LeftValueExpr ans
|-- FuncDecl @Name: get_ans -> @RetType: Int, line: 12
|   |-- Params:
|   |   |-- Int ans
|   |   |-- Int v0
|   |   `-- Int v1
|   `-- Body:
|       `-- BlockStmt, line: 12
|           |-- VarDecl, BaseType: Int, line: 13
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr v
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 0
|           |-- IfStmt, line: 14
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Eq
|           |   |       |-- LeftValueExpr v0
|           |   |       `-- LeftValueExpr v1
|           |   |-- Thenbody:
|           |   |   `-- ExprStmt line: 14
|           |   |       `-- BinaryExpr Assign
|           |   |           |-- LeftValueExpr v
|           |   |           `-- Const Int: 1
|           |   `-- Elsebody:
|           |       `-- None
|           |-- ExprStmt line: 15
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr ans
|           |       `-- BinaryExpr Mul
|           |           |-- LeftValueExpr ans
|           |           `-- Const Int: 2
|           |-- ExprStmt line: 16
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr ans
|           |       `-- BinaryExpr Add
|           |           |-- LeftValueExpr ans
|           |           `-- LeftValueExpr v
|           `-- ReturnStmt, line: 17
|               `-- LeftValueExpr ans
`-- FuncDecl @Name: main -> @RetType: Int, line: 20
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 20
            |-- VarDecl, BaseType: const Int, line: 21
            |   `-- DefNode
            |       `-- Var: LeftValueExpr k0
            |       `-- Init: InitSingle
            |           `-- UnaryExpr Sub
            |               `-- Const LL: 2147483648
            |-- VarDecl, BaseType: const Int, line: 22
            |   `-- DefNode
            |       `-- Var: LeftValueExpr k1
            |       `-- Init: InitSingle
            |           `-- Const LL: 2147483648
            |-- VarDecl, BaseType: const Int, line: 23
            |   `-- DefNode
            |       `-- Var: LeftValueExpr k2
            |       `-- Init: InitSingle
            |           `-- BinaryExpr Add
            |               |-- Const LL: 2147483648
            |               `-- Const Int: 1
            |-- VarDecl, BaseType: const Int, line: 24
            |   `-- DefNode
            |       `-- Var: LeftValueExpr k3
            |       `-- Init: InitSingle
            |           `-- Const Int: 2147483647
            |-- VarDecl, BaseType: const Int, line: 25
            |   `-- DefNode
            |       `-- Var: LeftValueExpr k4
            |       `-- Init: InitSingle
            |           `-- BinaryExpr Sub
            |               |-- Const Int: 2147483647
            |               `-- Const Int: 1
            |-- VarDecl, BaseType: Int, line: 26
            |   |-- DefNode
            |   |   |-- Var: LeftValueExpr a1
            |   |   `-- Init: no initializer
            |   |-- DefNode
            |   |   |-- Var: LeftValueExpr a2
            |   |   `-- Init: no initializer
            |   |-- DefNode
            |   |   |-- Var: LeftValueExpr a3
            |   |   `-- Init: no initializer
            |   `-- DefNode
            |       |-- Var: LeftValueExpr a4
            |       `-- Init: no initializer
            |-- ExprStmt line: 27
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a1
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = Const Int: 0
            |           |-- Arg1 = LeftValueExpr k0
            |           `-- Arg2 = LeftValueExpr k1
            |-- ExprStmt line: 28
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a1
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a1
            |           |-- Arg1 = BinaryExpr Add
            |           |   Arg1 = |-- LeftValueExpr k0
            |           |   Arg1 = `-- Const Int: 1
            |           `-- Arg2 = LeftValueExpr k2
            |-- ExprStmt line: 29
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a1
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a1
            |           |-- Arg1 = LeftValueExpr k0
            |           `-- Arg2 = BinaryExpr Sub
            |               |-- UnaryExpr Sub
            |               |   `-- LeftValueExpr k3
            |               `-- Const Int: 1
            |-- ExprStmt line: 30
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a1
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a1
            |           |-- Arg1 = LeftValueExpr k0
            |           `-- Arg2 = BinaryExpr Add
            |               |-- LeftValueExpr k4
            |               `-- Const Int: 1
            |-- ExprStmt line: 31
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a1
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a1
            |           |-- Arg1 = BinaryExpr Div
            |           |   Arg1 = |-- LeftValueExpr k1
            |           |   Arg1 = `-- Const Int: 2
            |           `-- Arg2 = BinaryExpr Div
            |               |-- LeftValueExpr k2
            |               `-- Const Int: 2
            |-- ExprStmt line: 32
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a1
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a1
            |           |-- Arg1 = LeftValueExpr k1
            |           `-- Arg2 = BinaryExpr Sub
            |               |-- UnaryExpr Sub
            |               |   `-- LeftValueExpr k3
            |               `-- Const Int: 1
            |-- ExprStmt line: 33
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a1
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a1
            |           |-- Arg1 = LeftValueExpr k1
            |           `-- Arg2 = BinaryExpr Add
            |               |-- LeftValueExpr k4
            |               `-- Const Int: 1
            |-- ExprStmt line: 34
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a2
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = Const Int: 0
            |           |-- Arg1 = LeftValueExpr k2
            |           `-- Arg2 = LeftValueExpr k3
            |-- ExprStmt line: 35
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a2
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a2
            |           |-- Arg1 = LeftValueExpr k2
            |           `-- Arg2 = LeftValueExpr k4
            |-- ExprStmt line: 36
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a2
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a2
            |           |-- Arg1 = LeftValueExpr k3
            |           `-- Arg2 = LeftValueExpr k4
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a2
            |       `-- FuncCallExpr get_ans
            |           |-- Arg0 = LeftValueExpr a2
            |           |-- Arg1 = BinaryExpr Div
            |           |   Arg1 = |-- LeftValueExpr k0
            |           |   Arg1 = `-- Const Int: 2
            |           `-- Arg2 = BinaryExpr Div
            |               |-- LeftValueExpr k1
            |               `-- Const Int: 2
            |-- ExprStmt line: 38
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a3
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = Const Int: 0
            |           |-- Arg1 = LeftValueExpr k0
            |           `-- Arg2 = LeftValueExpr k1
            |-- ExprStmt line: 39
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a3
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a3
            |           |-- Arg1 = BinaryExpr Add
            |           |   Arg1 = |-- LeftValueExpr k0
            |           |   Arg1 = `-- Const Int: 1
            |           `-- Arg2 = LeftValueExpr k2
            |-- ExprStmt line: 40
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a3
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a3
            |           |-- Arg1 = LeftValueExpr k0
            |           `-- Arg2 = BinaryExpr Sub
            |               |-- UnaryExpr Sub
            |               |   `-- LeftValueExpr k3
            |               `-- Const Int: 1
            |-- ExprStmt line: 41
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a3
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a3
            |           |-- Arg1 = LeftValueExpr k0
            |           `-- Arg2 = BinaryExpr Add
            |               |-- LeftValueExpr k4
            |               `-- Const Int: 1
            |-- ExprStmt line: 42
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a3
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a3
            |           |-- Arg1 = BinaryExpr Div
            |           |   Arg1 = |-- LeftValueExpr k1
            |           |   Arg1 = `-- Const Int: 2
            |           `-- Arg2 = BinaryExpr Div
            |               |-- LeftValueExpr k2
            |               `-- Const Int: 2
            |-- ExprStmt line: 43
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a3
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a3
            |           |-- Arg1 = LeftValueExpr k1
            |           `-- Arg2 = BinaryExpr Sub
            |               |-- UnaryExpr Sub
            |               |   `-- LeftValueExpr k3
            |               `-- Const Int: 1
            |-- ExprStmt line: 44
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a3
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a3
            |           |-- Arg1 = LeftValueExpr k1
            |           `-- Arg2 = BinaryExpr Add
            |               |-- LeftValueExpr k4
            |               `-- Const Int: 1
            |-- ExprStmt line: 45
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a4
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = Const Int: 0
            |           |-- Arg1 = LeftValueExpr k2
            |           `-- Arg2 = LeftValueExpr k3
            |-- ExprStmt line: 46
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a4
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a4
            |           |-- Arg1 = LeftValueExpr k2
            |           `-- Arg2 = LeftValueExpr k4
            |-- ExprStmt line: 47
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a4
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a4
            |           |-- Arg1 = LeftValueExpr k3
            |           `-- Arg2 = LeftValueExpr k4
            |-- ExprStmt line: 48
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a4
            |       `-- FuncCallExpr get_ans_se
            |           |-- Arg0 = LeftValueExpr a4
            |           |-- Arg1 = BinaryExpr Div
            |           |   Arg1 = |-- LeftValueExpr k0
            |           |   Arg1 = `-- Const Int: 2
            |           `-- Arg2 = BinaryExpr Div
            |               |-- LeftValueExpr k1
            |               `-- Const Int: 2
            `-- ReturnStmt, line: 49
                `-- BinaryExpr Add
                    |-- BinaryExpr Add
                    |   |-- BinaryExpr Add
                    |   |   |-- LeftValueExpr a1
                    |   |   `-- LeftValueExpr a2
                    |   `-- LeftValueExpr a3
                    `-- LeftValueExpr a4
