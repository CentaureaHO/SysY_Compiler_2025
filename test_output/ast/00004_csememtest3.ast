ASTree
|-- VarDecl, BaseType: Int, line: 1
|   `-- DefNode
|       `-- Var: LeftValueExpr A[Dim0]
|           `-- Dim0 = Const Int: 100
|       `-- Init: InitMulti
|-- VarDecl, BaseType: Int, line: 2
|   `-- DefNode
|       `-- Var: LeftValueExpr B[Dim0]
|           `-- Dim0 = Const Int: 100
|       `-- Init: InitMulti
|-- VarDecl, BaseType: Int, line: 3
|   `-- DefNode
|       `-- Var: LeftValueExpr C[Dim0]
|           `-- Dim0 = Const Int: 100
|       `-- Init: InitMulti
|-- VarDecl, BaseType: Int, line: 4
|   `-- DefNode
|       `-- Var: LeftValueExpr D[Dim0]
|           `-- Dim0 = Const Int: 100
|       `-- Init: InitMulti
|-- VarDecl, BaseType: const Int, line: 5
|   `-- DefNode
|       `-- Var: LeftValueExpr p
|       `-- Init: InitSingle
|           `-- Const Int: 234145
|-- FuncDecl @Name: f -> @RetType: Void, line: 6
|   |-- Params:
|   |   |-- Int A[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   |-- Int B[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   |-- Int C[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   |-- Int D[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   `-- Int n
|   `-- Body:
|       `-- BlockStmt, line: 7
|           |-- IfStmt, line: 8
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Eq
|           |   |       |-- LeftValueExpr n
|           |   |       `-- Const Int: 0
|           |   |-- Thenbody:
|           |   |   `-- BlockStmt, line: 8
|           |   |       `-- ReturnStmt, line: 9
|           |   |           `-- No return value
|           |   `-- Elsebody:
|           |       `-- None
|           |-- VarDecl, BaseType: Int, line: 11
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr i
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 0
|           |-- WhileStmt, line: 12
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr i
|           |   |       `-- Const Int: 100
|           |   `-- Body:
|           |       `-- BlockStmt, line: 12
|           |           |-- ExprStmt line: 13
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr A[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- BinaryExpr Add
|           |           |           |-- BinaryExpr Add
|           |           |           |   |-- LeftValueExpr C[Dim0]
|           |           |           |   |   `-- Dim0 = LeftValueExpr i
|           |           |           |   `-- LeftValueExpr B[Dim0]
|           |           |           |       `-- Dim0 = LeftValueExpr i
|           |           |           `-- LeftValueExpr D[Dim0]
|           |           |               `-- Dim0 = LeftValueExpr i
|           |           |-- ExprStmt line: 14
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr B[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- BinaryExpr Add
|           |           |           |-- BinaryExpr Add
|           |           |           |   |-- LeftValueExpr A[Dim0]
|           |           |           |   |   `-- Dim0 = LeftValueExpr i
|           |           |           |   `-- LeftValueExpr C[Dim0]
|           |           |           |       `-- Dim0 = LeftValueExpr i
|           |           |           `-- LeftValueExpr D[Dim0]
|           |           |               `-- Dim0 = LeftValueExpr i
|           |           |-- ExprStmt line: 15
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr C[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- BinaryExpr Add
|           |           |           |-- BinaryExpr Add
|           |           |           |   |-- LeftValueExpr B[Dim0]
|           |           |           |   |   `-- Dim0 = LeftValueExpr i
|           |           |           |   `-- LeftValueExpr A[Dim0]
|           |           |           |       `-- Dim0 = LeftValueExpr i
|           |           |           `-- LeftValueExpr D[Dim0]
|           |           |               `-- Dim0 = LeftValueExpr i
|           |           |-- ExprStmt line: 16
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr A[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- BinaryExpr Mod
|           |           |           |-- LeftValueExpr A[Dim0]
|           |           |           |   `-- Dim0 = LeftValueExpr i
|           |           |           `-- LeftValueExpr p
|           |           |-- ExprStmt line: 17
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr B[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- BinaryExpr Mod
|           |           |           |-- LeftValueExpr B[Dim0]
|           |           |           |   `-- Dim0 = LeftValueExpr i
|           |           |           `-- LeftValueExpr p
|           |           |-- ExprStmt line: 18
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr C[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- BinaryExpr Mod
|           |           |           |-- LeftValueExpr C[Dim0]
|           |           |           |   `-- Dim0 = LeftValueExpr i
|           |           |           `-- LeftValueExpr p
|           |           `-- ExprStmt line: 19
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Add
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           `-- ExprStmt line: 21
|               `-- FuncCallExpr f
|                   |-- Arg0 = LeftValueExpr B
|                   |-- Arg1 = LeftValueExpr C
|                   |-- Arg2 = LeftValueExpr A
|                   |-- Arg3 = LeftValueExpr D
|                   `-- Arg4 = BinaryExpr Sub
|                       |-- LeftValueExpr n
|                       `-- Const Int: 1
|-- FuncDecl @Name: sum -> @RetType: Int, line: 23
|   |-- Params:
|   |   `-- Int A[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   `-- Body:
|       `-- BlockStmt, line: 24
|           |-- VarDecl, BaseType: Int, line: 25
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr i
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 0
|           |-- VarDecl, BaseType: Int, line: 26
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr S
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 0
|           |-- WhileStmt, line: 27
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr i
|           |   |       `-- Const Int: 100
|           |   `-- Body:
|           |       `-- BlockStmt, line: 27
|           |           |-- ExprStmt line: 28
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr S
|           |           |       `-- BinaryExpr Add
|           |           |           |-- LeftValueExpr S
|           |           |           `-- LeftValueExpr A[Dim0]
|           |           |               `-- Dim0 = LeftValueExpr i
|           |           `-- ExprStmt line: 29
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Add
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 31
|               `-- LeftValueExpr S
`-- FuncDecl @Name: main -> @RetType: Int, line: 33
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 34
            |-- VarDecl, BaseType: Int, line: 35
            |   `-- DefNode
            |       `-- Var: LeftValueExpr i
            |       `-- Init: InitSingle
            |           `-- Const Int: 0
            |-- WhileStmt, line: 36
            |   |-- Cond:
            |   |   `-- BinaryExpr Lt
            |   |       |-- LeftValueExpr i
            |   |       `-- Const Int: 100
            |   `-- Body:
            |       `-- BlockStmt, line: 36
            |           |-- ExprStmt line: 37
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr A[Dim0]
            |           |       |   `-- Dim0 = LeftValueExpr i
            |           |       `-- BinaryExpr Add
            |           |           |-- Const Int: 1
            |           |           `-- BinaryExpr Div
            |           |               |-- LeftValueExpr i
            |           |               `-- Const Int: 4
            |           |-- ExprStmt line: 38
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr B[Dim0]
            |           |       |   `-- Dim0 = LeftValueExpr i
            |           |       `-- BinaryExpr Add
            |           |           |-- Const Int: 2
            |           |           `-- BinaryExpr Div
            |           |               |-- LeftValueExpr i
            |           |               `-- Const Int: 3
            |           |-- ExprStmt line: 39
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr C[Dim0]
            |           |       |   `-- Dim0 = LeftValueExpr i
            |           |       `-- BinaryExpr Add
            |           |           |-- Const Int: 3
            |           |           `-- BinaryExpr Div
            |           |               |-- LeftValueExpr i
            |           |               `-- Const Int: 2
            |           |-- ExprStmt line: 40
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr D[Dim0]
            |           |       |   `-- Dim0 = LeftValueExpr i
            |           |       `-- BinaryExpr Add
            |           |           |-- Const Int: 4
            |           |           `-- LeftValueExpr i
            |           `-- ExprStmt line: 41
            |               `-- BinaryExpr Assign
            |                   |-- LeftValueExpr i
            |                   `-- BinaryExpr Add
            |                       |-- LeftValueExpr i
            |                       `-- Const Int: 1
            |-- VarDecl, BaseType: Int, line: 43
            |   `-- DefNode
            |       `-- Var: LeftValueExpr ans
            |       `-- Init: InitSingle
            |           `-- Const Int: 0
            |-- ExprStmt line: 44
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr ans
            |       `-- BinaryExpr Add
            |           |-- LeftValueExpr ans
            |           `-- FuncCallExpr sum
            |               `-- Arg0 = LeftValueExpr D
            |-- ExprStmt line: 45
            |   `-- FuncCallExpr f
            |       |-- Arg0 = LeftValueExpr A
            |       |-- Arg1 = LeftValueExpr B
            |       |-- Arg2 = LeftValueExpr C
            |       |-- Arg3 = LeftValueExpr D
            |       `-- Arg4 = Const Int: 10
            |-- ExprStmt line: 46
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr ans
            |       `-- BinaryExpr Add
            |           |-- LeftValueExpr ans
            |           `-- FuncCallExpr sum
            |               `-- Arg0 = LeftValueExpr D
            |-- ExprStmt line: 47
            |   `-- FuncCallExpr f
            |       |-- Arg0 = LeftValueExpr A
            |       |-- Arg1 = LeftValueExpr A
            |       |-- Arg2 = LeftValueExpr A
            |       |-- Arg3 = LeftValueExpr D
            |       `-- Arg4 = Const Int: 10
            |-- ExprStmt line: 48
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr ans
            |       `-- BinaryExpr Add
            |           |-- LeftValueExpr ans
            |           `-- FuncCallExpr sum
            |               `-- Arg0 = LeftValueExpr D
            |-- ExprStmt line: 49
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr ans
            |       `-- BinaryExpr Add
            |           |-- LeftValueExpr ans
            |           `-- FuncCallExpr sum
            |               `-- Arg0 = LeftValueExpr A
            |-- ExprStmt line: 50
            |   `-- FuncCallExpr f
            |       |-- Arg0 = LeftValueExpr D
            |       |-- Arg1 = LeftValueExpr D
            |       |-- Arg2 = LeftValueExpr D
            |       |-- Arg3 = LeftValueExpr A
            |       `-- Arg4 = Const Int: 10
            |-- ExprStmt line: 51
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr ans
            |       `-- BinaryExpr Add
            |           |-- LeftValueExpr ans
            |           `-- FuncCallExpr sum
            |               `-- Arg0 = LeftValueExpr A
            |-- ExprStmt line: 52
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr ans
            |       `-- BinaryExpr Add
            |           |-- LeftValueExpr ans
            |           `-- FuncCallExpr sum
            |               `-- Arg0 = LeftValueExpr D
            |-- ExprStmt line: 54
            |   `-- FuncCallExpr putint
            |       `-- Arg0 = LeftValueExpr ans
            |-- ExprStmt line: 55
            |   `-- FuncCallExpr putch
            |       `-- Arg0 = Const Int: 10
            |-- ExprStmt line: 56
            |   `-- FuncCallExpr putarray
            |       |-- Arg0 = Const Int: 100
            |       `-- Arg1 = LeftValueExpr A
            |-- ExprStmt line: 57
            |   `-- FuncCallExpr putarray
            |       |-- Arg0 = Const Int: 100
            |       `-- Arg1 = LeftValueExpr B
            |-- ExprStmt line: 58
            |   `-- FuncCallExpr putarray
            |       |-- Arg0 = Const Int: 100
            |       `-- Arg1 = LeftValueExpr C
            |-- ExprStmt line: 59
            |   `-- FuncCallExpr putarray
            |       |-- Arg0 = Const Int: 100
            |       `-- Arg1 = LeftValueExpr D
            `-- ReturnStmt, line: 60
                `-- Const Int: 0
