ASTree
|-- FuncDecl @Name: MAX -> @RetType: Int, line: 2
|   |-- Params:
|   |   |-- Int a
|   |   `-- Int b
|   `-- Body:
|       `-- BlockStmt, line: 3
|           `-- IfStmt, line: 4
|               |-- Condition:
|               |   `-- BinaryExpr Eq
|               |       |-- LeftValueExpr a
|               |       `-- LeftValueExpr b
|               |-- Thenbody:
|               |   `-- ReturnStmt, line: 5
|               |       `-- LeftValueExpr a
|               `-- Elsebody:
|                   `-- IfStmt, line: 6
|                       |-- Condition:
|                       |   `-- BinaryExpr Gt
|                       |       |-- LeftValueExpr a
|                       |       `-- LeftValueExpr b
|                       |-- Thenbody:
|                       |   `-- ReturnStmt, line: 7
|                       |       `-- LeftValueExpr a
|                       `-- Elsebody:
|                           `-- ReturnStmt, line: 9
|                               `-- LeftValueExpr b
|-- FuncDecl @Name: max_sum_nonadjacent -> @RetType: Int, line: 12
|   |-- Params:
|   |   |-- Int arr[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   `-- Int n
|   `-- Body:
|       `-- BlockStmt, line: 13
|           |-- VarDecl, BaseType: Int, line: 14
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr temp[Dim0]
|           |           `-- Dim0 = Const Int: 16
|           |       `-- Init: InitMulti
|           |-- ExprStmt line: 15
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr temp[Dim0]
|           |       |   `-- Dim0 = Const Int: 0
|           |       `-- LeftValueExpr arr[Dim0]
|           |           `-- Dim0 = Const Int: 0
|           |-- ExprStmt line: 16
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr temp[Dim0]
|           |       |   `-- Dim0 = Const Int: 1
|           |       `-- FuncCallExpr MAX
|           |           |-- Arg0 = LeftValueExpr arr[Dim0]
|           |           |   Arg0 = `-- Dim0 = Const Int: 0
|           |           `-- Arg1 = LeftValueExpr arr[Dim0]
|           |               `-- Dim0 = Const Int: 1
|           |-- VarDecl, BaseType: Int, line: 17
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr i
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 2
|           |-- WhileStmt, line: 18
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr i
|           |   |       `-- LeftValueExpr n
|           |   `-- Body:
|           |       `-- BlockStmt, line: 18
|           |           |-- ExprStmt line: 19
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr temp[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- FuncCallExpr MAX
|           |           |           |-- Arg0 = BinaryExpr Add
|           |           |           |   Arg0 = |-- LeftValueExpr temp[Dim0]
|           |           |           |   Arg0 = |   `-- Dim0 = BinaryExpr Sub
|           |           |           |   Arg0 = |       |-- LeftValueExpr i
|           |           |           |   Arg0 = |       `-- Const Int: 2
|           |           |           |   Arg0 = `-- LeftValueExpr arr[Dim0]
|           |           |           |   Arg0 =     `-- Dim0 = LeftValueExpr i
|           |           |           `-- Arg1 = LeftValueExpr temp[Dim0]
|           |           |               `-- Dim0 = BinaryExpr Sub
|           |           |                   |-- LeftValueExpr i
|           |           |                   `-- Const Int: 1
|           |           `-- ExprStmt line: 20
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Add
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 22
|               `-- LeftValueExpr temp[Dim0]
|                   `-- Dim0 = BinaryExpr Sub
|                       |-- LeftValueExpr n
|                       `-- Const Int: 1
|-- FuncDecl @Name: longest_common_subseq -> @RetType: Int, line: 25
|   |-- Params:
|   |   |-- Int arr1[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   |-- Int len1
|   |   |-- Int arr2[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   `-- Int len2
|   `-- Body:
|       `-- BlockStmt, line: 27
|           |-- VarDecl, BaseType: Int, line: 28
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr p[Dim0][Dim1]
|           |           |-- Dim0 = Const Int: 16
|           |           `-- Dim1 = Const Int: 16
|           |       `-- Init: InitMulti
|           |-- VarDecl, BaseType: Int, line: 29
|           |   |-- DefNode
|           |   |   |-- Var: LeftValueExpr i
|           |   |   `-- Init: no initializer
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr j
|           |       `-- Init: no initializer
|           |-- ExprStmt line: 30
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr i
|           |       `-- Const Int: 1
|           |-- WhileStmt, line: 31
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Le
|           |   |       |-- LeftValueExpr i
|           |   |       `-- LeftValueExpr len1
|           |   `-- Body:
|           |       `-- BlockStmt, line: 31
|           |           |-- ExprStmt line: 32
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr j
|           |           |       `-- Const Int: 1
|           |           |-- WhileStmt, line: 33
|           |           |   |-- Cond:
|           |           |   |   `-- BinaryExpr Le
|           |           |   |       |-- LeftValueExpr j
|           |           |   |       `-- LeftValueExpr len2
|           |           |   `-- Body:
|           |           |       `-- BlockStmt, line: 33
|           |           |           |-- IfStmt, line: 34
|           |           |           |   |-- Condition:
|           |           |           |   |   `-- BinaryExpr Eq
|           |           |           |   |       |-- LeftValueExpr arr1[Dim0]
|           |           |           |   |       |   `-- Dim0 = BinaryExpr Sub
|           |           |           |   |       |       |-- LeftValueExpr i
|           |           |           |   |       |       `-- Const Int: 1
|           |           |           |   |       `-- LeftValueExpr arr2[Dim0]
|           |           |           |   |           `-- Dim0 = BinaryExpr Sub
|           |           |           |   |               |-- LeftValueExpr j
|           |           |           |   |               `-- Const Int: 1
|           |           |           |   |-- Thenbody:
|           |           |           |   |   `-- BlockStmt, line: 34
|           |           |           |   |       `-- ExprStmt line: 35
|           |           |           |   |           `-- BinaryExpr Assign
|           |           |           |   |               |-- LeftValueExpr p[Dim0][Dim1]
|           |           |           |   |               |   |-- Dim0 = LeftValueExpr i
|           |           |           |   |               |   `-- Dim1 = LeftValueExpr j
|           |           |           |   |               `-- BinaryExpr Add
|           |           |           |   |                   |-- LeftValueExpr p[Dim0][Dim1]
|           |           |           |   |                   |   |-- Dim0 = BinaryExpr Sub
|           |           |           |   |                   |   |   Dim0 = |-- LeftValueExpr i
|           |           |           |   |                   |   |   Dim0 = `-- Const Int: 1
|           |           |           |   |                   |   `-- Dim1 = BinaryExpr Sub
|           |           |           |   |                   |       |-- LeftValueExpr j
|           |           |           |   |                   |       `-- Const Int: 1
|           |           |           |   |                   `-- Const Int: 1
|           |           |           |   `-- Elsebody:
|           |           |           |       `-- BlockStmt, line: 36
|           |           |           |           `-- ExprStmt line: 37
|           |           |           |               `-- BinaryExpr Assign
|           |           |           |                   |-- LeftValueExpr p[Dim0][Dim1]
|           |           |           |                   |   |-- Dim0 = LeftValueExpr i
|           |           |           |                   |   `-- Dim1 = LeftValueExpr j
|           |           |           |                   `-- FuncCallExpr MAX
|           |           |           |                       |-- Arg0 = LeftValueExpr p[Dim0][Dim1]
|           |           |           |                       |   Arg0 = |-- Dim0 = BinaryExpr Sub
|           |           |           |                       |   Arg0 = |   Dim0 = |-- LeftValueExpr i
|           |           |           |                       |   Arg0 = |   Dim0 = `-- Const Int: 1
|           |           |           |                       |   Arg0 = `-- Dim1 = LeftValueExpr j
|           |           |           |                       `-- Arg1 = LeftValueExpr p[Dim0][Dim1]
|           |           |           |                           |-- Dim0 = LeftValueExpr i
|           |           |           |                           `-- Dim1 = BinaryExpr Sub
|           |           |           |                               |-- LeftValueExpr j
|           |           |           |                               `-- Const Int: 1
|           |           |           `-- ExprStmt line: 39
|           |           |               `-- BinaryExpr Assign
|           |           |                   |-- LeftValueExpr j
|           |           |                   `-- BinaryExpr Add
|           |           |                       |-- LeftValueExpr j
|           |           |                       `-- Const Int: 1
|           |           `-- ExprStmt line: 41
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Add
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 43
|               `-- LeftValueExpr p[Dim0][Dim1]
|                   |-- Dim0 = LeftValueExpr len1
|                   `-- Dim1 = LeftValueExpr len2
`-- FuncDecl @Name: main -> @RetType: Int, line: 46
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 47
            |-- VarDecl, BaseType: Int, line: 48
            |   `-- DefNode
            |       `-- Var: LeftValueExpr A[Dim0]
            |           `-- Dim0 = Const Int: 15
            |       `-- Init: InitMulti
            |           |-- InitSingle
            |           |   `-- Const Int: 8
            |           |-- InitSingle
            |           |   `-- Const Int: 7
            |           |-- InitSingle
            |           |   `-- Const Int: 4
            |           |-- InitSingle
            |           |   `-- Const Int: 1
            |           |-- InitSingle
            |           |   `-- Const Int: 2
            |           |-- InitSingle
            |           |   `-- Const Int: 7
            |           |-- InitSingle
            |           |   `-- Const Int: 0
            |           |-- InitSingle
            |           |   `-- Const Int: 1
            |           |-- InitSingle
            |           |   `-- Const Int: 9
            |           |-- InitSingle
            |           |   `-- Const Int: 3
            |           |-- InitSingle
            |           |   `-- Const Int: 4
            |           |-- InitSingle
            |           |   `-- Const Int: 8
            |           |-- InitSingle
            |           |   `-- Const Int: 3
            |           |-- InitSingle
            |           |   `-- Const Int: 7
            |           `-- InitSingle
            |               `-- Const Int: 0
            |-- VarDecl, BaseType: Int, line: 49
            |   `-- DefNode
            |       `-- Var: LeftValueExpr B[Dim0]
            |           `-- Dim0 = Const Int: 13
            |       `-- Init: InitMulti
            |           |-- InitSingle
            |           |   `-- Const Int: 3
            |           |-- InitSingle
            |           |   `-- Const Int: 9
            |           |-- InitSingle
            |           |   `-- Const Int: 7
            |           |-- InitSingle
            |           |   `-- Const Int: 1
            |           |-- InitSingle
            |           |   `-- Const Int: 4
            |           |-- InitSingle
            |           |   `-- Const Int: 2
            |           |-- InitSingle
            |           |   `-- Const Int: 4
            |           |-- InitSingle
            |           |   `-- Const Int: 3
            |           |-- InitSingle
            |           |   `-- Const Int: 6
            |           |-- InitSingle
            |           |   `-- Const Int: 8
            |           |-- InitSingle
            |           |   `-- Const Int: 0
            |           |-- InitSingle
            |           |   `-- Const Int: 1
            |           `-- InitSingle
            |               `-- Const Int: 5
            |-- VarDecl, BaseType: Int, line: 50
            |   |-- DefNode
            |   |   |-- Var: LeftValueExpr An
            |   |   `-- Init: no initializer
            |   `-- DefNode
            |       |-- Var: LeftValueExpr Bn
            |       `-- Init: no initializer
            |-- ExprStmt line: 52
            |   `-- FuncCallExpr putint
            |       `-- Arg0 = FuncCallExpr max_sum_nonadjacent
            |           |-- Arg0 = LeftValueExpr A
            |           `-- Arg1 = Const Int: 15
            |-- ExprStmt line: 53
            |   `-- FuncCallExpr putch
            |       `-- Arg0 = Const Int: 10
            |-- ExprStmt line: 55
            |   `-- FuncCallExpr putint
            |       `-- Arg0 = FuncCallExpr longest_common_subseq
            |           |-- Arg0 = LeftValueExpr A
            |           |-- Arg1 = Const Int: 15
            |           |-- Arg2 = LeftValueExpr B
            |           `-- Arg3 = Const Int: 13
            |-- ExprStmt line: 56
            |   `-- FuncCallExpr putch
            |       `-- Arg0 = Const Int: 10
            `-- ReturnStmt, line: 57
                `-- Const Int: 0
