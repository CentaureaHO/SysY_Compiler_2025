ASTree
|-- VarDecl, BaseType: Int, line: 2
|   `-- DefNode
|       |-- Var: LeftValueExpr N
|       `-- Init: no initializer
|-- FuncDecl @Name: insert -> @RetType: Int, line: 3
|   |-- Params:
|   |   |-- Int a[Dim0]
|   |   |   `-- Dim0 = Const Int: -1
|   |   `-- Int x
|   `-- Body:
|       `-- BlockStmt, line: 4
|           |-- VarDecl, BaseType: Int, line: 5
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr p
|           |       `-- Init: no initializer
|           |-- VarDecl, BaseType: Int, line: 6
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr i
|           |       `-- Init: no initializer
|           |-- ExprStmt line: 7
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr p
|           |       `-- Const Int: 0
|           |-- WhileStmt, line: 9
|           |   |-- Cond:
|           |   |   `-- BinaryExpr And
|           |   |       |-- BinaryExpr Gt
|           |   |       |   |-- LeftValueExpr x
|           |   |       |   `-- LeftValueExpr a[Dim0]
|           |   |       |       `-- Dim0 = LeftValueExpr p
|           |   |       `-- BinaryExpr Lt
|           |   |           |-- LeftValueExpr p
|           |   |           `-- LeftValueExpr N
|           |   `-- Body:
|           |       `-- ExprStmt line: 10
|           |           `-- BinaryExpr Assign
|           |               |-- LeftValueExpr p
|           |               `-- BinaryExpr Add
|           |                   |-- LeftValueExpr p
|           |                   `-- Const Int: 1
|           |-- ExprStmt line: 12
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr i
|           |       `-- LeftValueExpr N
|           |-- WhileStmt, line: 13
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr i
|           |   |       `-- LeftValueExpr p
|           |   `-- Body:
|           |       `-- BlockStmt, line: 14
|           |           |-- ExprStmt line: 15
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr a[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr i
|           |           |       `-- LeftValueExpr a[Dim0]
|           |           |           `-- Dim0 = BinaryExpr Sub
|           |           |               |-- LeftValueExpr i
|           |           |               `-- Const Int: 1
|           |           |-- ExprStmt line: 16
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr a[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr p
|           |           |       `-- LeftValueExpr x
|           |           `-- ExprStmt line: 17
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr i
|           |                   `-- BinaryExpr Sub
|           |                       |-- LeftValueExpr i
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 21
|               `-- Const Int: 0
`-- FuncDecl @Name: main -> @RetType: Int, line: 24
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 25
            |-- ExprStmt line: 26
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr N
            |       `-- Const Int: 10
            |-- VarDecl, BaseType: Int, line: 27
            |   `-- DefNode
            |       |-- Var: LeftValueExpr a[Dim0]
            |       |   Var: `-- Dim0 = Const Int: 11
            |       `-- Init: no initializer
            |-- ExprStmt line: 29
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 0
            |       `-- Const Int: 1
            |-- ExprStmt line: 30
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 1
            |       `-- Const Int: 3
            |-- ExprStmt line: 31
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 2
            |       `-- Const Int: 4
            |-- ExprStmt line: 32
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 3
            |       `-- Const Int: 7
            |-- ExprStmt line: 33
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 4
            |       `-- Const Int: 8
            |-- ExprStmt line: 34
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 5
            |       `-- Const Int: 11
            |-- ExprStmt line: 35
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 6
            |       `-- Const Int: 13
            |-- ExprStmt line: 36
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 7
            |       `-- Const Int: 18
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 8
            |       `-- Const Int: 56
            |-- ExprStmt line: 38
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a[Dim0]
            |       |   `-- Dim0 = Const Int: 9
            |       `-- Const Int: 78
            |-- VarDecl, BaseType: Int, line: 39
            |   `-- DefNode
            |       |-- Var: LeftValueExpr x
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 40
            |   `-- DefNode
            |       |-- Var: LeftValueExpr i
            |       `-- Init: no initializer
            |-- ExprStmt line: 41
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr i
            |       `-- Const Int: 0
            |-- ExprStmt line: 42
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr x
            |       `-- FuncCallExpr getint
            |           `-- No args
            |-- ExprStmt line: 43
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr x
            |       `-- FuncCallExpr insert
            |           |-- Arg0 = LeftValueExpr a
            |           `-- Arg1 = LeftValueExpr x
            |-- WhileStmt, line: 45
            |   |-- Cond:
            |   |   `-- BinaryExpr Lt
            |   |       |-- LeftValueExpr i
            |   |       `-- LeftValueExpr N
            |   `-- Body:
            |       `-- BlockStmt, line: 46
            |           |-- ExprStmt line: 47
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr x
            |           |       `-- LeftValueExpr a[Dim0]
            |           |           `-- Dim0 = LeftValueExpr i
            |           |-- ExprStmt line: 48
            |           |   `-- FuncCallExpr putint
            |           |       `-- Arg0 = LeftValueExpr x
            |           |-- ExprStmt line: 49
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr x
            |           |       `-- Const Int: 10
            |           |-- ExprStmt line: 50
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = LeftValueExpr x
            |           `-- ExprStmt line: 51
            |               `-- BinaryExpr Assign
            |                   |-- LeftValueExpr i
            |                   `-- BinaryExpr Add
            |                       |-- LeftValueExpr i
            |                       `-- Const Int: 1
            `-- ReturnStmt, line: 54
                `-- Const Int: 0
