ASTree
|-- VarDecl, BaseType: Int, line: 1
|   `-- DefNode
|       |-- Var: LeftValueExpr n
|       `-- Init: no initializer
|-- FuncDecl @Name: gcd -> @RetType: Int, line: 3
|   |-- Params:
|   |   |-- Int m
|   |   `-- Int n
|   `-- Body:
|       `-- BlockStmt, line: 4
|           |-- VarDecl, BaseType: Int, line: 5
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr a
|           |       `-- Init: no initializer
|           |-- VarDecl, BaseType: Int, line: 6
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr b
|           |       `-- Init: no initializer
|           |-- ExprStmt line: 7
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr a
|           |       `-- LeftValueExpr m
|           |-- ExprStmt line: 8
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr b
|           |       `-- LeftValueExpr n
|           |-- VarDecl, BaseType: Int, line: 10
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr t
|           |       `-- Init: no initializer
|           |-- VarDecl, BaseType: Int, line: 11
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr r
|           |       `-- Init: no initializer
|           |-- IfStmt, line: 13
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr m
|           |   |       `-- LeftValueExpr n
|           |   |-- Thenbody:
|           |   |   `-- BlockStmt, line: 13
|           |   |       |-- ExprStmt line: 13
|           |   |       |   `-- BinaryExpr Assign
|           |   |       |       |-- LeftValueExpr t
|           |   |       |       `-- LeftValueExpr m
|           |   |       |-- ExprStmt line: 13
|           |   |       |   `-- BinaryExpr Assign
|           |   |       |       |-- LeftValueExpr m
|           |   |       |       `-- LeftValueExpr n
|           |   |       `-- ExprStmt line: 13
|           |   |           `-- BinaryExpr Assign
|           |   |               |-- LeftValueExpr n
|           |   |               `-- LeftValueExpr t
|           |   `-- Elsebody:
|           |       `-- None
|           |-- ExprStmt line: 15
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr r
|           |       `-- BinaryExpr Mod
|           |           |-- LeftValueExpr m
|           |           `-- LeftValueExpr n
|           |-- WhileStmt, line: 17
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Neq
|           |   |       |-- LeftValueExpr r
|           |   |       `-- Const Int: 0
|           |   `-- Body:
|           |       `-- BlockStmt, line: 19
|           |           |-- ExprStmt line: 19
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr m
|           |           |       `-- LeftValueExpr n
|           |           |-- ExprStmt line: 19
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr n
|           |           |       `-- LeftValueExpr r
|           |           `-- ExprStmt line: 19
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr r
|           |                   `-- BinaryExpr Mod
|           |                       |-- LeftValueExpr m
|           |                       `-- LeftValueExpr n
|           `-- ReturnStmt, line: 21
|               `-- BinaryExpr Div
|                   |-- BinaryExpr Mul
|                   |   |-- LeftValueExpr a
|                   |   `-- LeftValueExpr b
|                   `-- LeftValueExpr n
`-- FuncDecl @Name: main -> @RetType: Int, line: 24
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 25
            |-- VarDecl, BaseType: Int, line: 27
            |   `-- DefNode
            |       |-- Var: LeftValueExpr i
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 28
            |   `-- DefNode
            |       |-- Var: LeftValueExpr m
            |       `-- Init: no initializer
            |-- ExprStmt line: 31
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr i
            |       `-- FuncCallExpr getint
            |           `-- No args
            |-- ExprStmt line: 32
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr m
            |       `-- FuncCallExpr getint
            |           `-- No args
            `-- ReturnStmt, line: 34
                `-- FuncCallExpr gcd
                    |-- Arg0 = LeftValueExpr i
                    `-- Arg1 = LeftValueExpr m
