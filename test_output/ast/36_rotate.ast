ASTree
|-- VarDecl, BaseType: const Int, line: 1
|   |-- DefNode
|   |   `-- Var: LeftValueExpr MAX_WIDTH
|   |   `-- Init: InitSingle
|   |       `-- Const Int: 1024
|   `-- DefNode
|       `-- Var: LeftValueExpr MAX_HEIGHT
|       `-- Init: InitSingle
|           `-- Const Int: 1024
|-- VarDecl, BaseType: Int, line: 2
|   |-- DefNode
|   |   |-- Var: LeftValueExpr image[Dim0]
|   |   |   Var: `-- Dim0 = BinaryExpr Mul
|   |   |   Var:     |-- LeftValueExpr MAX_WIDTH
|   |   |   Var:     `-- LeftValueExpr MAX_HEIGHT
|   |   `-- Init: no initializer
|   |-- DefNode
|   |   |-- Var: LeftValueExpr width
|   |   `-- Init: no initializer
|   `-- DefNode
|       |-- Var: LeftValueExpr height
|       `-- Init: no initializer
|-- VarDecl, BaseType: const Float, line: 4
|   |-- DefNode
|   |   `-- Var: LeftValueExpr PI
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 3.14159
|   |-- DefNode
|   |   `-- Var: LeftValueExpr TWO_PI
|   |   `-- Init: InitSingle
|   |       `-- Const Float: 6.28319
|   `-- DefNode
|       `-- Var: LeftValueExpr EPSILON
|       `-- Init: InitSingle
|           `-- Const Float: 1e-06
|-- FuncDecl @Name: my_fabs -> @RetType: Float, line: 6
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 6
|           |-- IfStmt, line: 7
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- Const Int: 0
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 7
|           |   |       `-- LeftValueExpr x
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 8
|               `-- UnaryExpr Sub
|                   `-- LeftValueExpr x
|-- FuncDecl @Name: p -> @RetType: Float, line: 11
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 11
|           `-- ReturnStmt, line: 11
|               `-- BinaryExpr Sub
|                   |-- BinaryExpr Mul
|                   |   |-- Const Int: 3
|                   |   `-- LeftValueExpr x
|                   `-- BinaryExpr Mul
|                       |-- BinaryExpr Mul
|                       |   |-- BinaryExpr Mul
|                       |   |   |-- Const Int: 4
|                       |   |   `-- LeftValueExpr x
|                       |   `-- LeftValueExpr x
|                       `-- LeftValueExpr x
|-- FuncDecl @Name: my_sin_impl -> @RetType: Float, line: 13
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 13
|           |-- IfStmt, line: 14
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Le
|           |   |       |-- FuncCallExpr my_fabs
|           |   |       |   `-- Arg0 = LeftValueExpr x
|           |   |       `-- LeftValueExpr EPSILON
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 14
|           |   |       `-- LeftValueExpr x
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 15
|               `-- FuncCallExpr p
|                   `-- Arg0 = FuncCallExpr my_sin_impl
|                       `-- Arg0 = BinaryExpr Div
|                           |-- LeftValueExpr x
|                           `-- Const Float: 3
|-- FuncDecl @Name: my_sin -> @RetType: Float, line: 18
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 18
|           |-- IfStmt, line: 19
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Or
|           |   |       |-- BinaryExpr Gt
|           |   |       |   |-- LeftValueExpr x
|           |   |       |   `-- LeftValueExpr TWO_PI
|           |   |       `-- BinaryExpr Lt
|           |   |           |-- LeftValueExpr x
|           |   |           `-- UnaryExpr Sub
|           |   |               `-- LeftValueExpr TWO_PI
|           |   |-- Thenbody:
|           |   |   `-- BlockStmt, line: 19
|           |   |       |-- VarDecl, BaseType: Int, line: 20
|           |   |       |   `-- DefNode
|           |   |       |       `-- Var: LeftValueExpr xx
|           |   |       |       `-- Init: InitSingle
|           |   |       |           `-- BinaryExpr Div
|           |   |       |               |-- LeftValueExpr x
|           |   |       |               `-- LeftValueExpr TWO_PI
|           |   |       `-- ExprStmt line: 21
|           |   |           `-- BinaryExpr Assign
|           |   |               |-- LeftValueExpr x
|           |   |               `-- BinaryExpr Sub
|           |   |                   |-- LeftValueExpr x
|           |   |                   `-- BinaryExpr Mul
|           |   |                       |-- LeftValueExpr xx
|           |   |                       `-- LeftValueExpr TWO_PI
|           |   `-- Elsebody:
|           |       `-- None
|           |-- IfStmt, line: 23
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- LeftValueExpr PI
|           |   |-- Thenbody:
|           |   |   `-- ExprStmt line: 23
|           |   |       `-- BinaryExpr Assign
|           |   |           |-- LeftValueExpr x
|           |   |           `-- BinaryExpr Sub
|           |   |               |-- LeftValueExpr x
|           |   |               `-- LeftValueExpr TWO_PI
|           |   `-- Elsebody:
|           |       `-- None
|           |-- IfStmt, line: 24
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- UnaryExpr Sub
|           |   |           `-- LeftValueExpr PI
|           |   |-- Thenbody:
|           |   |   `-- ExprStmt line: 24
|           |   |       `-- BinaryExpr Assign
|           |   |           |-- LeftValueExpr x
|           |   |           `-- BinaryExpr Add
|           |   |               |-- LeftValueExpr x
|           |   |               `-- LeftValueExpr TWO_PI
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 25
|               `-- FuncCallExpr my_sin_impl
|                   `-- Arg0 = LeftValueExpr x
|-- FuncDecl @Name: my_cos -> @RetType: Float, line: 28
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 28
|           `-- ReturnStmt, line: 28
|               `-- FuncCallExpr my_sin
|                   `-- Arg0 = BinaryExpr Add
|                       |-- LeftValueExpr x
|                       `-- BinaryExpr Div
|                           |-- LeftValueExpr PI
|                           `-- Const Int: 2
|-- FuncDecl @Name: read_image -> @RetType: Int, line: 30
|   |-- Params:
|   |       None
|   `-- Body:
|       `-- BlockStmt, line: 30
|           |-- IfStmt, line: 31
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Or
|           |   |       |-- BinaryExpr Neq
|           |   |       |   |-- FuncCallExpr getch
|           |   |       |   |   `-- No args
|           |   |       |   `-- Const Int: 80
|           |   |       `-- BinaryExpr Neq
|           |   |           |-- FuncCallExpr getch
|           |   |           |   `-- No args
|           |   |           `-- Const Int: 50
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 31
|           |   |       `-- UnaryExpr Sub
|           |   |           `-- Const Int: 1
|           |   `-- Elsebody:
|           |       `-- None
|           |-- ExprStmt line: 32
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr width
|           |       `-- FuncCallExpr getint
|           |           `-- No args
|           |-- ExprStmt line: 33
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr height
|           |       `-- FuncCallExpr getint
|           |           `-- No args
|           |-- IfStmt, line: 34
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Or
|           |   |       |-- BinaryExpr Or
|           |   |       |   |-- BinaryExpr Gt
|           |   |       |   |   |-- LeftValueExpr width
|           |   |       |   |   `-- LeftValueExpr MAX_WIDTH
|           |   |       |   `-- BinaryExpr Gt
|           |   |       |       |-- LeftValueExpr height
|           |   |       |       `-- LeftValueExpr MAX_HEIGHT
|           |   |       `-- BinaryExpr Neq
|           |   |           |-- FuncCallExpr getint
|           |   |           |   `-- No args
|           |   |           `-- Const Int: 255
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 34
|           |   |       `-- UnaryExpr Sub
|           |   |           `-- Const Int: 1
|           |   `-- Elsebody:
|           |       `-- None
|           |-- VarDecl, BaseType: Int, line: 35
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr y
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 0
|           |-- WhileStmt, line: 36
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr y
|           |   |       `-- LeftValueExpr height
|           |   `-- Body:
|           |       `-- BlockStmt, line: 36
|           |           |-- VarDecl, BaseType: Int, line: 37
|           |           |   `-- DefNode
|           |           |       `-- Var: LeftValueExpr x
|           |           |       `-- Init: InitSingle
|           |           |           `-- Const Int: 0
|           |           |-- WhileStmt, line: 38
|           |           |   |-- Cond:
|           |           |   |   `-- BinaryExpr Lt
|           |           |   |       |-- LeftValueExpr x
|           |           |   |       `-- LeftValueExpr width
|           |           |   `-- Body:
|           |           |       `-- BlockStmt, line: 38
|           |           |           |-- ExprStmt line: 39
|           |           |           |   `-- BinaryExpr Assign
|           |           |           |       |-- LeftValueExpr image[Dim0]
|           |           |           |       |   `-- Dim0 = BinaryExpr Add
|           |           |           |       |       |-- BinaryExpr Mul
|           |           |           |       |       |   |-- LeftValueExpr y
|           |           |           |       |       |   `-- LeftValueExpr width
|           |           |           |       |       `-- LeftValueExpr x
|           |           |           |       `-- FuncCallExpr getint
|           |           |           |           `-- No args
|           |           |           `-- ExprStmt line: 40
|           |           |               `-- BinaryExpr Assign
|           |           |                   |-- LeftValueExpr x
|           |           |                   `-- BinaryExpr Add
|           |           |                       |-- LeftValueExpr x
|           |           |                       `-- Const Int: 1
|           |           `-- ExprStmt line: 42
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr y
|           |                   `-- BinaryExpr Add
|           |                       |-- LeftValueExpr y
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 44
|               `-- Const Int: 0
|-- FuncDecl @Name: rotate -> @RetType: Int, line: 47
|   |-- Params:
|   |   |-- Int x
|   |   |-- Int y
|   |   `-- Float rad
|   `-- Body:
|       `-- BlockStmt, line: 47
|           |-- VarDecl, BaseType: Float, line: 48
|           |   |-- DefNode
|           |   |   `-- Var: LeftValueExpr sinma
|           |   |   `-- Init: InitSingle
|           |   |       `-- FuncCallExpr my_sin
|           |   |           `-- Arg0 = LeftValueExpr rad
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr cosma
|           |       `-- Init: InitSingle
|           |           `-- FuncCallExpr my_cos
|           |               `-- Arg0 = LeftValueExpr rad
|           |-- VarDecl, BaseType: Int, line: 49
|           |   |-- DefNode
|           |   |   `-- Var: LeftValueExpr hwidth
|           |   |   `-- Init: InitSingle
|           |   |       `-- BinaryExpr Div
|           |   |           |-- LeftValueExpr width
|           |   |           `-- Const Int: 2
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr hheight
|           |       `-- Init: InitSingle
|           |           `-- BinaryExpr Div
|           |               |-- LeftValueExpr height
|           |               `-- Const Int: 2
|           |-- VarDecl, BaseType: Int, line: 50
|           |   |-- DefNode
|           |   |   `-- Var: LeftValueExpr xt
|           |   |   `-- Init: InitSingle
|           |   |       `-- BinaryExpr Sub
|           |   |           |-- LeftValueExpr x
|           |   |           `-- LeftValueExpr hwidth
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr yt
|           |       `-- Init: InitSingle
|           |           `-- BinaryExpr Sub
|           |               |-- LeftValueExpr y
|           |               `-- LeftValueExpr hheight
|           |-- VarDecl, BaseType: Int, line: 51
|           |   |-- DefNode
|           |   |   `-- Var: LeftValueExpr src_x
|           |   |   `-- Init: InitSingle
|           |   |       `-- BinaryExpr Add
|           |   |           |-- BinaryExpr Sub
|           |   |           |   |-- BinaryExpr Mul
|           |   |           |   |   |-- LeftValueExpr xt
|           |   |           |   |   `-- LeftValueExpr cosma
|           |   |           |   `-- BinaryExpr Mul
|           |   |           |       |-- LeftValueExpr yt
|           |   |           |       `-- LeftValueExpr sinma
|           |   |           `-- LeftValueExpr hwidth
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr src_y
|           |       `-- Init: InitSingle
|           |           `-- BinaryExpr Add
|           |               |-- BinaryExpr Add
|           |               |   |-- BinaryExpr Mul
|           |               |   |   |-- LeftValueExpr xt
|           |               |   |   `-- LeftValueExpr sinma
|           |               |   `-- BinaryExpr Mul
|           |               |       |-- LeftValueExpr yt
|           |               |       `-- LeftValueExpr cosma
|           |               `-- LeftValueExpr hheight
|           |-- IfStmt, line: 53
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Or
|           |   |       |-- BinaryExpr Or
|           |   |       |   |-- BinaryExpr Or
|           |   |       |   |   |-- BinaryExpr Lt
|           |   |       |   |   |   |-- LeftValueExpr src_x
|           |   |       |   |   |   `-- Const Int: 0
|           |   |       |   |   `-- BinaryExpr Ge
|           |   |       |   |       |-- LeftValueExpr src_x
|           |   |       |   |       `-- LeftValueExpr width
|           |   |       |   `-- BinaryExpr Lt
|           |   |       |       |-- LeftValueExpr src_y
|           |   |       |       `-- Const Int: 0
|           |   |       `-- BinaryExpr Ge
|           |   |           |-- LeftValueExpr src_y
|           |   |           `-- LeftValueExpr height
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 53
|           |   |       `-- Const Int: 0
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 54
|               `-- LeftValueExpr image[Dim0]
|                   `-- Dim0 = BinaryExpr Add
|                       |-- BinaryExpr Mul
|                       |   |-- LeftValueExpr src_y
|                       |   `-- LeftValueExpr width
|                       `-- LeftValueExpr src_x
|-- FuncDecl @Name: write_pgm -> @RetType: Void, line: 57
|   |-- Params:
|   |   `-- Float rad
|   `-- Body:
|       `-- BlockStmt, line: 57
|           |-- ExprStmt line: 58
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 80
|           |-- ExprStmt line: 58
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 50
|           |-- ExprStmt line: 58
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 10
|           |-- ExprStmt line: 59
|           |   `-- FuncCallExpr putint
|           |       `-- Arg0 = LeftValueExpr width
|           |-- ExprStmt line: 59
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 32
|           |-- ExprStmt line: 59
|           |   `-- FuncCallExpr putint
|           |       `-- Arg0 = LeftValueExpr height
|           |-- ExprStmt line: 59
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 32
|           |-- ExprStmt line: 60
|           |   `-- FuncCallExpr putint
|           |       `-- Arg0 = Const Int: 255
|           |-- ExprStmt line: 60
|           |   `-- FuncCallExpr putch
|           |       `-- Arg0 = Const Int: 10
|           |-- VarDecl, BaseType: Int, line: 61
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr y
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 0
|           `-- WhileStmt, line: 62
|               |-- Cond:
|               |   `-- BinaryExpr Lt
|               |       |-- LeftValueExpr y
|               |       `-- LeftValueExpr height
|               `-- Body:
|                   `-- BlockStmt, line: 62
|                       |-- VarDecl, BaseType: Int, line: 63
|                       |   `-- DefNode
|                       |       `-- Var: LeftValueExpr x
|                       |       `-- Init: InitSingle
|                       |           `-- Const Int: 0
|                       |-- WhileStmt, line: 64
|                       |   |-- Cond:
|                       |   |   `-- BinaryExpr Lt
|                       |   |       |-- LeftValueExpr x
|                       |   |       `-- LeftValueExpr width
|                       |   `-- Body:
|                       |       `-- BlockStmt, line: 64
|                       |           |-- ExprStmt line: 65
|                       |           |   `-- FuncCallExpr putint
|                       |           |       `-- Arg0 = FuncCallExpr rotate
|                       |           |           |-- Arg0 = LeftValueExpr x
|                       |           |           |-- Arg1 = LeftValueExpr y
|                       |           |           `-- Arg2 = LeftValueExpr rad
|                       |           |-- ExprStmt line: 66
|                       |           |   `-- FuncCallExpr putch
|                       |           |       `-- Arg0 = Const Int: 32
|                       |           `-- ExprStmt line: 67
|                       |               `-- BinaryExpr Assign
|                       |                   |-- LeftValueExpr x
|                       |                   `-- BinaryExpr Add
|                       |                       |-- LeftValueExpr x
|                       |                       `-- Const Int: 1
|                       |-- ExprStmt line: 69
|                       |   `-- FuncCallExpr putch
|                       |       `-- Arg0 = Const Int: 10
|                       `-- ExprStmt line: 70
|                           `-- BinaryExpr Assign
|                               |-- LeftValueExpr y
|                               `-- BinaryExpr Add
|                                   |-- LeftValueExpr y
|                                   `-- Const Int: 1
`-- FuncDecl @Name: main -> @RetType: Int, line: 74
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 74
            |-- VarDecl, BaseType: Float, line: 75
            |   `-- DefNode
            |       `-- Var: LeftValueExpr rad
            |       `-- Init: InitSingle
            |           `-- FuncCallExpr getfloat
            |               `-- No args
            |-- ExprStmt line: 76
            |   `-- FuncCallExpr getch
            |       `-- No args
            |-- IfStmt, line: 77
            |   |-- Condition:
            |   |   `-- BinaryExpr Lt
            |   |       |-- FuncCallExpr read_image
            |   |       |   `-- No args
            |   |       `-- Const Int: 0
            |   |-- Thenbody:
            |   |   `-- ReturnStmt, line: 77
            |   |       `-- UnaryExpr Sub
            |   |           `-- Const Int: 1
            |   `-- Elsebody:
            |       `-- None
            |-- ExprStmt line: 78
            |   `-- FuncCallExpr write_pgm
            |       `-- Arg0 = LeftValueExpr rad
            `-- ReturnStmt, line: 79
                `-- Const Int: 0
