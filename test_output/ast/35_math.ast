ASTree
|-- VarDecl, BaseType: const Float, line: 3
|   `-- DefNode
|       `-- Var: LeftValueExpr e
|       `-- Init: InitSingle
|           `-- Const Float: 2.71828
|-- FuncDecl @Name: my_fabs -> @RetType: Float, line: 5
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 5
|           |-- IfStmt, line: 6
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- Const Int: 0
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 6
|           |   |       `-- LeftValueExpr x
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 7
|               `-- UnaryExpr Sub
|                   `-- LeftValueExpr x
|-- FuncDecl @Name: my_pow -> @RetType: Float, line: 10
|   |-- Params:
|   |   |-- Float a
|   |   `-- Int n
|   `-- Body:
|       `-- BlockStmt, line: 10
|           |-- IfStmt, line: 11
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr n
|           |   |       `-- Const Int: 0
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 11
|           |   |       `-- BinaryExpr Div
|           |   |           |-- Const Int: 1
|           |   |           `-- FuncCallExpr my_pow
|           |   |               |-- Arg0 = LeftValueExpr a
|           |   |               `-- Arg1 = UnaryExpr Sub
|           |   |                   `-- LeftValueExpr n
|           |   `-- Elsebody:
|           |       `-- None
|           |-- VarDecl, BaseType: Float, line: 12
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr res
|           |       `-- Init: InitSingle
|           |           `-- Const Float: 1
|           |-- WhileStmt, line: 13
|           |   |-- Cond:
|           |   |   `-- LeftValueExpr n
|           |   `-- Body:
|           |       `-- BlockStmt, line: 13
|           |           |-- IfStmt, line: 14
|           |           |   |-- Condition:
|           |           |   |   `-- BinaryExpr Mod
|           |           |   |       |-- LeftValueExpr n
|           |           |   |       `-- Const Int: 2
|           |           |   |-- Thenbody:
|           |           |   |   `-- ExprStmt line: 14
|           |           |   |       `-- BinaryExpr Assign
|           |           |   |           |-- LeftValueExpr res
|           |           |   |           `-- BinaryExpr Mul
|           |           |   |               |-- LeftValueExpr res
|           |           |   |               `-- LeftValueExpr a
|           |           |   `-- Elsebody:
|           |           |       `-- None
|           |           |-- ExprStmt line: 15
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr a
|           |           |       `-- BinaryExpr Mul
|           |           |           |-- LeftValueExpr a
|           |           |           `-- LeftValueExpr a
|           |           `-- ExprStmt line: 16
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr n
|           |                   `-- BinaryExpr Div
|           |                       |-- LeftValueExpr n
|           |                       `-- Const Int: 2
|           `-- ReturnStmt, line: 18
|               `-- LeftValueExpr res
|-- FuncDecl @Name: my_sqrt -> @RetType: Float, line: 21
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 21
|           |-- IfStmt, line: 22
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- Const Int: 100
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 22
|           |   |       `-- BinaryExpr Mul
|           |   |           |-- Const Float: 10
|           |   |           `-- FuncCallExpr my_sqrt
|           |   |               `-- Arg0 = BinaryExpr Div
|           |   |                   |-- LeftValueExpr x
|           |   |                   `-- Const Int: 100
|           |   `-- Elsebody:
|           |       `-- None
|           |-- VarDecl, BaseType: Float, line: 23
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr t
|           |       `-- Init: InitSingle
|           |           `-- BinaryExpr Add
|           |               |-- BinaryExpr Add
|           |               |   |-- BinaryExpr Div
|           |               |   |   |-- LeftValueExpr x
|           |               |   |   `-- Const Int: 8
|           |               |   `-- Const Float: 0.5
|           |               `-- BinaryExpr Div
|           |                   |-- BinaryExpr Mul
|           |                   |   |-- Const Int: 2
|           |                   |   `-- LeftValueExpr x
|           |                   `-- BinaryExpr Add
|           |                       |-- Const Int: 4
|           |                       `-- LeftValueExpr x
|           |-- VarDecl, BaseType: Int, line: 24
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr c
|           |       `-- Init: InitSingle
|           |           `-- Const Int: 10
|           |-- WhileStmt, line: 25
|           |   |-- Cond:
|           |   |   `-- LeftValueExpr c
|           |   `-- Body:
|           |       `-- BlockStmt, line: 25
|           |           |-- ExprStmt line: 26
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr t
|           |           |       `-- BinaryExpr Div
|           |           |           |-- BinaryExpr Add
|           |           |           |   |-- LeftValueExpr t
|           |           |           |   `-- BinaryExpr Div
|           |           |           |       |-- LeftValueExpr x
|           |           |           |       `-- LeftValueExpr t
|           |           |           `-- Const Int: 2
|           |           `-- ExprStmt line: 27
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr c
|           |                   `-- BinaryExpr Sub
|           |                       |-- LeftValueExpr c
|           |                       `-- Const Int: 1
|           `-- ReturnStmt, line: 29
|               `-- LeftValueExpr t
|-- FuncDecl @Name: F1 -> @RetType: Float, line: 32
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 32
|           `-- ReturnStmt, line: 32
|               `-- BinaryExpr Div
|                   |-- Const Int: 1
|                   `-- LeftValueExpr x
|-- FuncDecl @Name: F2 -> @RetType: Float, line: 34
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 34
|           `-- ReturnStmt, line: 34
|               `-- BinaryExpr Div
|                   |-- Const Int: 1
|                   `-- FuncCallExpr my_sqrt
|                       `-- Arg0 = BinaryExpr Sub
|                           |-- Const Int: 1
|                           `-- BinaryExpr Mul
|                               |-- LeftValueExpr x
|                               `-- LeftValueExpr x
|-- FuncDecl @Name: simpson -> @RetType: Float, line: 36
|   |-- Params:
|   |   |-- Float a
|   |   |-- Float b
|   |   `-- Int flag
|   `-- Body:
|       `-- BlockStmt, line: 36
|           |-- VarDecl, BaseType: Float, line: 37
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr c
|           |       `-- Init: InitSingle
|           |           `-- BinaryExpr Add
|           |               |-- LeftValueExpr a
|           |               `-- BinaryExpr Div
|           |                   |-- BinaryExpr Sub
|           |                   |   |-- LeftValueExpr b
|           |                   |   `-- LeftValueExpr a
|           |                   `-- Const Int: 2
|           |-- IfStmt, line: 38
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Eq
|           |   |       |-- LeftValueExpr flag
|           |   |       `-- Const Int: 1
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 38
|           |   |       `-- BinaryExpr Div
|           |   |           |-- BinaryExpr Mul
|           |   |           |   |-- BinaryExpr Add
|           |   |           |   |   |-- BinaryExpr Add
|           |   |           |   |   |   |-- FuncCallExpr F1
|           |   |           |   |   |   |   `-- Arg0 = LeftValueExpr a
|           |   |           |   |   |   `-- BinaryExpr Mul
|           |   |           |   |   |       |-- Const Int: 4
|           |   |           |   |   |       `-- FuncCallExpr F1
|           |   |           |   |   |           `-- Arg0 = LeftValueExpr c
|           |   |           |   |   `-- FuncCallExpr F1
|           |   |           |   |       `-- Arg0 = LeftValueExpr b
|           |   |           |   `-- BinaryExpr Sub
|           |   |           |       |-- LeftValueExpr b
|           |   |           |       `-- LeftValueExpr a
|           |   |           `-- Const Int: 6
|           |   `-- Elsebody:
|           |       `-- None
|           |-- IfStmt, line: 39
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Eq
|           |   |       |-- LeftValueExpr flag
|           |   |       `-- Const Int: 2
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 39
|           |   |       `-- BinaryExpr Div
|           |   |           |-- BinaryExpr Mul
|           |   |           |   |-- BinaryExpr Add
|           |   |           |   |   |-- BinaryExpr Add
|           |   |           |   |   |   |-- FuncCallExpr F2
|           |   |           |   |   |   |   `-- Arg0 = LeftValueExpr a
|           |   |           |   |   |   `-- BinaryExpr Mul
|           |   |           |   |   |       |-- Const Int: 4
|           |   |           |   |   |       `-- FuncCallExpr F2
|           |   |           |   |   |           `-- Arg0 = LeftValueExpr c
|           |   |           |   |   `-- FuncCallExpr F2
|           |   |           |   |       `-- Arg0 = LeftValueExpr b
|           |   |           |   `-- BinaryExpr Sub
|           |   |           |       |-- LeftValueExpr b
|           |   |           |       `-- LeftValueExpr a
|           |   |           `-- Const Int: 6
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 40
|               `-- Const Int: 0
|-- FuncDecl @Name: asr5 -> @RetType: Float, line: 43
|   |-- Params:
|   |   |-- Float a
|   |   |-- Float b
|   |   |-- Float eps
|   |   |-- Float A
|   |   `-- Int flag
|   `-- Body:
|       `-- BlockStmt, line: 43
|           |-- VarDecl, BaseType: Float, line: 44
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr c
|           |       `-- Init: InitSingle
|           |           `-- BinaryExpr Add
|           |               |-- LeftValueExpr a
|           |               `-- BinaryExpr Div
|           |                   |-- BinaryExpr Sub
|           |                   |   |-- LeftValueExpr b
|           |                   |   `-- LeftValueExpr a
|           |                   `-- Const Int: 2
|           |-- VarDecl, BaseType: Float, line: 45
|           |   |-- DefNode
|           |   |   `-- Var: LeftValueExpr L
|           |   |   `-- Init: InitSingle
|           |   |       `-- FuncCallExpr simpson
|           |   |           |-- Arg0 = LeftValueExpr a
|           |   |           |-- Arg1 = LeftValueExpr c
|           |   |           `-- Arg2 = LeftValueExpr flag
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr R
|           |       `-- Init: InitSingle
|           |           `-- FuncCallExpr simpson
|           |               |-- Arg0 = LeftValueExpr c
|           |               |-- Arg1 = LeftValueExpr b
|           |               `-- Arg2 = LeftValueExpr flag
|           |-- IfStmt, line: 46
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Le
|           |   |       |-- FuncCallExpr my_fabs
|           |   |       |   `-- Arg0 = BinaryExpr Sub
|           |   |       |       |-- BinaryExpr Add
|           |   |       |       |   |-- LeftValueExpr L
|           |   |       |       |   `-- LeftValueExpr R
|           |   |       |       `-- LeftValueExpr A
|           |   |       `-- BinaryExpr Mul
|           |   |           |-- Const Int: 15
|           |   |           `-- LeftValueExpr eps
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 46
|           |   |       `-- BinaryExpr Add
|           |   |           |-- BinaryExpr Add
|           |   |           |   |-- LeftValueExpr L
|           |   |           |   `-- LeftValueExpr R
|           |   |           `-- BinaryExpr Div
|           |   |               |-- BinaryExpr Sub
|           |   |               |   |-- BinaryExpr Add
|           |   |               |   |   |-- LeftValueExpr L
|           |   |               |   |   `-- LeftValueExpr R
|           |   |               |   `-- LeftValueExpr A
|           |   |               `-- Const Float: 15
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 47
|               `-- BinaryExpr Add
|                   |-- FuncCallExpr asr5
|                   |   |-- Arg0 = LeftValueExpr a
|                   |   |-- Arg1 = LeftValueExpr c
|                   |   |-- Arg2 = BinaryExpr Div
|                   |   |   Arg2 = |-- LeftValueExpr eps
|                   |   |   Arg2 = `-- Const Int: 2
|                   |   |-- Arg3 = LeftValueExpr L
|                   |   `-- Arg4 = LeftValueExpr flag
|                   `-- FuncCallExpr asr5
|                       |-- Arg0 = LeftValueExpr c
|                       |-- Arg1 = LeftValueExpr b
|                       |-- Arg2 = BinaryExpr Div
|                       |   Arg2 = |-- LeftValueExpr eps
|                       |   Arg2 = `-- Const Int: 2
|                       |-- Arg3 = LeftValueExpr R
|                       `-- Arg4 = LeftValueExpr flag
|-- FuncDecl @Name: asr4 -> @RetType: Float, line: 50
|   |-- Params:
|   |   |-- Float a
|   |   |-- Float b
|   |   |-- Float eps
|   |   `-- Int flag
|   `-- Body:
|       `-- BlockStmt, line: 50
|           `-- ReturnStmt, line: 51
|               `-- FuncCallExpr asr5
|                   |-- Arg0 = LeftValueExpr a
|                   |-- Arg1 = LeftValueExpr b
|                   |-- Arg2 = LeftValueExpr eps
|                   |-- Arg3 = FuncCallExpr simpson
|                   |   Arg3 = |-- Arg0 = LeftValueExpr a
|                   |   Arg3 = |-- Arg1 = LeftValueExpr b
|                   |   Arg3 = `-- Arg2 = LeftValueExpr flag
|                   `-- Arg4 = LeftValueExpr flag
|-- FuncDecl @Name: eee -> @RetType: Float, line: 54
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 54
|           |-- IfStmt, line: 55
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Gt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- Const Float: 0.001
|           |   |-- Thenbody:
|           |   |   `-- BlockStmt, line: 55
|           |   |       |-- VarDecl, BaseType: Float, line: 56
|           |   |       |   `-- DefNode
|           |   |       |       `-- Var: LeftValueExpr ee
|           |   |       |       `-- Init: InitSingle
|           |   |       |           `-- FuncCallExpr eee
|           |   |       |               `-- Arg0 = BinaryExpr Div
|           |   |       |                   |-- LeftValueExpr x
|           |   |       |                   `-- Const Int: 2
|           |   |       `-- ReturnStmt, line: 57
|           |   |           `-- BinaryExpr Mul
|           |   |               |-- LeftValueExpr ee
|           |   |               `-- LeftValueExpr ee
|           |   `-- Elsebody:
|           |       `-- None
|           `-- ReturnStmt, line: 59
|               `-- BinaryExpr Add
|                   |-- BinaryExpr Add
|                   |   |-- BinaryExpr Add
|                   |   |   |-- BinaryExpr Add
|                   |   |   |   |-- BinaryExpr Add
|                   |   |   |   |   |-- Const Int: 1
|                   |   |   |   |   `-- LeftValueExpr x
|                   |   |   |   `-- BinaryExpr Div
|                   |   |   |       |-- BinaryExpr Mul
|                   |   |   |       |   |-- LeftValueExpr x
|                   |   |   |       |   `-- LeftValueExpr x
|                   |   |   |       `-- Const Int: 2
|                   |   |   `-- BinaryExpr Div
|                   |   |       |-- FuncCallExpr my_pow
|                   |   |       |   |-- Arg0 = LeftValueExpr x
|                   |   |       |   `-- Arg1 = Const Int: 3
|                   |   |       `-- Const Int: 6
|                   |   `-- BinaryExpr Div
|                   |       |-- FuncCallExpr my_pow
|                   |       |   |-- Arg0 = LeftValueExpr x
|                   |       |   `-- Arg1 = Const Int: 4
|                   |       `-- Const Int: 24
|                   `-- BinaryExpr Div
|                       |-- FuncCallExpr my_pow
|                       |   |-- Arg0 = LeftValueExpr x
|                       |   `-- Arg1 = Const Int: 5
|                       `-- Const Int: 120
|-- FuncDecl @Name: my_exp -> @RetType: Float, line: 63
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 63
|           |-- IfStmt, line: 64
|           |   |-- Condition:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr x
|           |   |       `-- Const Int: 0
|           |   |-- Thenbody:
|           |   |   `-- ReturnStmt, line: 64
|           |   |       `-- BinaryExpr Div
|           |   |           |-- Const Int: 1
|           |   |           `-- FuncCallExpr my_exp
|           |   |               `-- Arg0 = UnaryExpr Sub
|           |   |                   `-- LeftValueExpr x
|           |   `-- Elsebody:
|           |       `-- None
|           |-- VarDecl, BaseType: Int, line: 65
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr n
|           |       `-- Init: InitSingle
|           |           `-- LeftValueExpr x
|           |-- ExprStmt line: 66
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr x
|           |       `-- BinaryExpr Sub
|           |           |-- LeftValueExpr x
|           |           `-- LeftValueExpr n
|           |-- VarDecl, BaseType: Float, line: 67
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr e1
|           |       `-- Init: InitSingle
|           |           `-- FuncCallExpr my_pow
|           |               |-- Arg0 = LeftValueExpr e
|           |               `-- Arg1 = LeftValueExpr n
|           |-- VarDecl, BaseType: Float, line: 68
|           |   `-- DefNode
|           |       `-- Var: LeftValueExpr e2
|           |       `-- Init: InitSingle
|           |           `-- FuncCallExpr eee
|           |               `-- Arg0 = LeftValueExpr x
|           `-- ReturnStmt, line: 69
|               `-- BinaryExpr Mul
|                   |-- LeftValueExpr e1
|                   `-- LeftValueExpr e2
|-- FuncDecl @Name: my_ln -> @RetType: Float, line: 72
|   |-- Params:
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 72
|           `-- ReturnStmt, line: 72
|               `-- FuncCallExpr asr4
|                   |-- Arg0 = Const Int: 1
|                   |-- Arg1 = LeftValueExpr x
|                   |-- Arg2 = Const Float: 1e-08
|                   `-- Arg3 = Const Int: 1
|-- FuncDecl @Name: my_log -> @RetType: Float, line: 74
|   |-- Params:
|   |   |-- Float a
|   |   `-- Float N
|   `-- Body:
|       `-- BlockStmt, line: 74
|           `-- ReturnStmt, line: 74
|               `-- BinaryExpr Div
|                   |-- FuncCallExpr my_ln
|                   |   `-- Arg0 = LeftValueExpr N
|                   `-- FuncCallExpr my_ln
|                       `-- Arg0 = LeftValueExpr a
|-- FuncDecl @Name: my_powf -> @RetType: Float, line: 76
|   |-- Params:
|   |   |-- Float a
|   |   `-- Float x
|   `-- Body:
|       `-- BlockStmt, line: 76
|           `-- ReturnStmt, line: 76
|               `-- FuncCallExpr my_exp
|                   `-- Arg0 = BinaryExpr Mul
|                       |-- LeftValueExpr x
|                       `-- FuncCallExpr my_ln
|                           `-- Arg0 = LeftValueExpr a
`-- FuncDecl @Name: main -> @RetType: Int, line: 78
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 78
            |-- VarDecl, BaseType: Int, line: 79
            |   `-- DefNode
            |       `-- Var: LeftValueExpr num
            |       `-- Init: InitSingle
            |           `-- FuncCallExpr getint
            |               `-- No args
            |-- WhileStmt, line: 80
            |   |-- Cond:
            |   |   `-- LeftValueExpr num
            |   `-- Body:
            |       `-- BlockStmt, line: 80
            |           |-- VarDecl, BaseType: Float, line: 81
            |           |   |-- DefNode
            |           |   |   `-- Var: LeftValueExpr x
            |           |   |   `-- Init: InitSingle
            |           |   |       `-- FuncCallExpr getfloat
            |           |   |           `-- No args
            |           |   `-- DefNode
            |           |       `-- Var: LeftValueExpr y
            |           |       `-- Init: InitSingle
            |           |           `-- FuncCallExpr getfloat
            |           |               `-- No args
            |           |-- ExprStmt line: 82
            |           |   `-- FuncCallExpr putfloat
            |           |       `-- Arg0 = FuncCallExpr my_fabs
            |           |           `-- Arg0 = LeftValueExpr x
            |           |-- ExprStmt line: 83
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 32
            |           |-- ExprStmt line: 84
            |           |   `-- FuncCallExpr putfloat
            |           |       `-- Arg0 = FuncCallExpr my_pow
            |           |           |-- Arg0 = LeftValueExpr x
            |           |           `-- Arg1 = Const Int: 2
            |           |-- ExprStmt line: 85
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 32
            |           |-- ExprStmt line: 86
            |           |   `-- FuncCallExpr putfloat
            |           |       `-- Arg0 = FuncCallExpr my_sqrt
            |           |           `-- Arg0 = LeftValueExpr x
            |           |-- ExprStmt line: 87
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 32
            |           |-- ExprStmt line: 88
            |           |   `-- FuncCallExpr putfloat
            |           |       `-- Arg0 = FuncCallExpr my_exp
            |           |           `-- Arg0 = LeftValueExpr x
            |           |-- ExprStmt line: 89
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 32
            |           |-- IfStmt, line: 90
            |           |   |-- Condition:
            |           |   |   `-- BinaryExpr Gt
            |           |   |       |-- LeftValueExpr x
            |           |   |       `-- Const Int: 0
            |           |   |-- Thenbody:
            |           |   |   `-- BlockStmt, line: 90
            |           |   |       `-- ExprStmt line: 91
            |           |   |           `-- FuncCallExpr putfloat
            |           |   |               `-- Arg0 = FuncCallExpr my_ln
            |           |   |                   `-- Arg0 = LeftValueExpr x
            |           |   `-- Elsebody:
            |           |       `-- BlockStmt, line: 92
            |           |           `-- ExprStmt line: 93
            |           |               `-- FuncCallExpr putch
            |           |                   `-- Arg0 = Const Int: 45
            |           |-- ExprStmt line: 95
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 32
            |           |-- IfStmt, line: 96
            |           |   |-- Condition:
            |           |   |   `-- BinaryExpr And
            |           |   |       |-- BinaryExpr Gt
            |           |   |       |   |-- LeftValueExpr x
            |           |   |       |   `-- Const Int: 0
            |           |   |       `-- BinaryExpr Gt
            |           |   |           |-- LeftValueExpr y
            |           |   |           `-- Const Int: 0
            |           |   |-- Thenbody:
            |           |   |   `-- BlockStmt, line: 96
            |           |   |       `-- ExprStmt line: 97
            |           |   |           `-- FuncCallExpr putfloat
            |           |   |               `-- Arg0 = FuncCallExpr my_log
            |           |   |                   |-- Arg0 = LeftValueExpr x
            |           |   |                   `-- Arg1 = LeftValueExpr y
            |           |   `-- Elsebody:
            |           |       `-- BlockStmt, line: 98
            |           |           `-- ExprStmt line: 99
            |           |               `-- FuncCallExpr putch
            |           |                   `-- Arg0 = Const Int: 45
            |           |-- ExprStmt line: 101
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 32
            |           |-- IfStmt, line: 102
            |           |   |-- Condition:
            |           |   |   `-- BinaryExpr Gt
            |           |   |       |-- LeftValueExpr x
            |           |   |       `-- Const Int: 0
            |           |   |-- Thenbody:
            |           |   |   `-- BlockStmt, line: 102
            |           |   |       `-- ExprStmt line: 103
            |           |   |           `-- FuncCallExpr putfloat
            |           |   |               `-- Arg0 = FuncCallExpr my_powf
            |           |   |                   |-- Arg0 = LeftValueExpr x
            |           |   |                   `-- Arg1 = LeftValueExpr y
            |           |   `-- Elsebody:
            |           |       `-- BlockStmt, line: 104
            |           |           `-- ExprStmt line: 105
            |           |               `-- FuncCallExpr putch
            |           |                   `-- Arg0 = Const Int: 45
            |           |-- ExprStmt line: 107
            |           |   `-- FuncCallExpr putch
            |           |       `-- Arg0 = Const Int: 10
            |           `-- ExprStmt line: 108
            |               `-- BinaryExpr Assign
            |                   |-- LeftValueExpr num
            |                   `-- BinaryExpr Sub
            |                       |-- LeftValueExpr num
            |                       `-- Const Int: 1
            `-- ReturnStmt, line: 110
                `-- Const Int: 0
