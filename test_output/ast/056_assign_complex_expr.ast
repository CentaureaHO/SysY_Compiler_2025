ASTree
`-- FuncDecl @Name: main -> @RetType: Int, line: 2
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 2
            |-- VarDecl, BaseType: Int, line: 3
            |   `-- DefNode
            |       |-- Var: LeftValueExpr a
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 4
            |   `-- DefNode
            |       |-- Var: LeftValueExpr b
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 5
            |   `-- DefNode
            |       |-- Var: LeftValueExpr c
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 6
            |   `-- DefNode
            |       |-- Var: LeftValueExpr d
            |       `-- Init: no initializer
            |-- VarDecl, BaseType: Int, line: 7
            |   `-- DefNode
            |       |-- Var: LeftValueExpr result
            |       `-- Init: no initializer
            |-- ExprStmt line: 8
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr a
            |       `-- Const Int: 5
            |-- ExprStmt line: 9
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr b
            |       `-- Const Int: 5
            |-- ExprStmt line: 10
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr c
            |       `-- Const Int: 1
            |-- ExprStmt line: 11
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr d
            |       `-- UnaryExpr Sub
            |           `-- Const Int: 2
            |-- ExprStmt line: 12
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr result
            |       `-- BinaryExpr Sub
            |           |-- BinaryExpr Add
            |           |   |-- BinaryExpr Div
            |           |   |   |-- BinaryExpr Mul
            |           |   |   |   |-- LeftValueExpr d
            |           |   |   |   `-- Const Int: 1
            |           |   |   `-- Const Int: 2
            |           |   `-- BinaryExpr Sub
            |           |       |-- LeftValueExpr a
            |           |       `-- LeftValueExpr b
            |           `-- BinaryExpr Mod
            |               |-- UnaryExpr Sub
            |               |   `-- BinaryExpr Add
            |               |       |-- LeftValueExpr c
            |               |       `-- Const Int: 3
            |               `-- Const Int: 2
            |-- ExprStmt line: 13
            |   `-- FuncCallExpr putint
            |       `-- Arg0 = LeftValueExpr result
            |-- ExprStmt line: 14
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr result
            |       `-- BinaryExpr Sub
            |           |-- BinaryExpr Add
            |           |   |-- BinaryExpr Add
            |           |   |   |-- BinaryExpr Mod
            |           |   |   |   |-- LeftValueExpr d
            |           |   |   |   `-- Const Int: 2
            |           |   |   `-- Const Int: 67
            |           |   `-- UnaryExpr Sub
            |           |       `-- BinaryExpr Sub
            |           |           |-- LeftValueExpr a
            |           |           `-- LeftValueExpr b
            |           `-- UnaryExpr Sub
            |               `-- BinaryExpr Mod
            |                   |-- BinaryExpr Add
            |                   |   |-- LeftValueExpr c
            |                   |   `-- Const Int: 2
            |                   `-- Const Int: 2
            |-- ExprStmt line: 15
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr result
            |       `-- BinaryExpr Add
            |           |-- LeftValueExpr result
            |           `-- Const Int: 3
            |-- ExprStmt line: 16
            |   `-- FuncCallExpr putint
            |       `-- Arg0 = LeftValueExpr result
            `-- ReturnStmt, line: 17
                `-- Const Int: 0
