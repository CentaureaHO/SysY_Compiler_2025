ASTree
|-- FuncDecl @Name: palindrome -> @RetType: Int, line: 1
|   |-- Params:
|   |   `-- Int n
|   `-- Body:
|       `-- BlockStmt, line: 2
|           |-- VarDecl, BaseType: Int, line: 3
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr a[Dim0]
|           |       |   Var: `-- Dim0 = Const Int: 4
|           |       `-- Init: no initializer
|           |-- VarDecl, BaseType: Int, line: 4
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr j
|           |       `-- Init: no initializer
|           |-- VarDecl, BaseType: Int, line: 5
|           |   `-- DefNode
|           |       |-- Var: LeftValueExpr flag
|           |       `-- Init: no initializer
|           |-- ExprStmt line: 6
|           |   `-- BinaryExpr Assign
|           |       |-- LeftValueExpr j
|           |       `-- Const Int: 0
|           |-- WhileStmt, line: 7
|           |   |-- Cond:
|           |   |   `-- BinaryExpr Lt
|           |   |       |-- LeftValueExpr j
|           |   |       `-- Const Int: 4
|           |   `-- Body:
|           |       `-- BlockStmt, line: 8
|           |           |-- ExprStmt line: 9
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr a[Dim0]
|           |           |       |   `-- Dim0 = LeftValueExpr j
|           |           |       `-- BinaryExpr Mod
|           |           |           |-- LeftValueExpr n
|           |           |           `-- Const Int: 10
|           |           |-- ExprStmt line: 10
|           |           |   `-- BinaryExpr Assign
|           |           |       |-- LeftValueExpr n
|           |           |       `-- BinaryExpr Div
|           |           |           |-- LeftValueExpr n
|           |           |           `-- Const Int: 10
|           |           `-- ExprStmt line: 11
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr j
|           |                   `-- BinaryExpr Add
|           |                       |-- LeftValueExpr j
|           |                       `-- Const Int: 1
|           |-- IfStmt, line: 14
|           |   |-- Condition:
|           |   |   `-- BinaryExpr And
|           |   |       |-- BinaryExpr Eq
|           |   |       |   |-- LeftValueExpr a[Dim0]
|           |   |       |   |   `-- Dim0 = Const Int: 0
|           |   |       |   `-- LeftValueExpr a[Dim0]
|           |   |       |       `-- Dim0 = Const Int: 3
|           |   |       `-- BinaryExpr Eq
|           |   |           |-- LeftValueExpr a[Dim0]
|           |   |           |   `-- Dim0 = Const Int: 1
|           |   |           `-- LeftValueExpr a[Dim0]
|           |   |               `-- Dim0 = Const Int: 2
|           |   |-- Thenbody:
|           |   |   `-- BlockStmt, line: 15
|           |   |       `-- ExprStmt line: 16
|           |   |           `-- BinaryExpr Assign
|           |   |               |-- LeftValueExpr flag
|           |   |               `-- Const Int: 1
|           |   `-- Elsebody:
|           |       `-- BlockStmt, line: 17
|           |           `-- ExprStmt line: 18
|           |               `-- BinaryExpr Assign
|           |                   |-- LeftValueExpr flag
|           |                   `-- Const Int: 0
|           `-- ReturnStmt, line: 20
|               `-- LeftValueExpr flag
`-- FuncDecl @Name: main -> @RetType: Int, line: 23
    |-- Params:
    |       None
    `-- Body:
        `-- BlockStmt, line: 24
            |-- VarDecl, BaseType: Int, line: 25
            |   `-- DefNode
            |       |-- Var: LeftValueExpr test
            |       `-- Init: no initializer
            |-- ExprStmt line: 26
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr test
            |       `-- Const Int: 1221
            |-- VarDecl, BaseType: Int, line: 27
            |   `-- DefNode
            |       |-- Var: LeftValueExpr flag
            |       `-- Init: no initializer
            |-- ExprStmt line: 28
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr flag
            |       `-- FuncCallExpr palindrome
            |           `-- Arg0 = LeftValueExpr test
            |-- IfStmt, line: 29
            |   |-- Condition:
            |   |   `-- BinaryExpr Eq
            |   |       |-- LeftValueExpr flag
            |   |       `-- Const Int: 1
            |   |-- Thenbody:
            |   |   `-- ExprStmt line: 30
            |   |       `-- FuncCallExpr putint
            |   |           `-- Arg0 = LeftValueExpr test
            |   `-- Elsebody:
            |       `-- BlockStmt, line: 32
            |           |-- ExprStmt line: 33
            |           |   `-- BinaryExpr Assign
            |           |       |-- LeftValueExpr flag
            |           |       `-- Const Int: 0
            |           `-- ExprStmt line: 34
            |               `-- FuncCallExpr putint
            |                   `-- Arg0 = LeftValueExpr flag
            |-- ExprStmt line: 37
            |   `-- BinaryExpr Assign
            |       |-- LeftValueExpr flag
            |       `-- Const Int: 10
            |-- ExprStmt line: 38
            |   `-- FuncCallExpr putch
            |       `-- Arg0 = LeftValueExpr flag
            `-- ReturnStmt, line: 40
                `-- Const Int: 0
