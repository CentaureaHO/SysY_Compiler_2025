// 全局数组
int unused_global_array[10];                     // 完全未使用的全局数组
int partially_used_global[5] = {1, 2, 3, 4, 5};  // 部分使用的全局数组
int fully_used_global[3]     = {10, 20, 30};     // 完全使用的全局数组

// 多维数组
int matrix[3][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};

// 数组求和
int sum_array(int arr[], int n)
{
    int sum = 0;
    int i   = 0;
    for (i = 0; i < n; i = i + 1) { sum = sum + arr[i]; }
    return sum;
}

// 修改数组
void modify_array(int arr[], int n, int value)
{
    int i = 0;
    for (i = 0; i < n; i = i + 1) { arr[i] = arr[i] + value; }
}

// 部分访问数组
void access_partial(int arr[], int start, int end)
{
    int i = 0;
    for (i = start; i < end; i = i + 1) { putint(arr[i]); }
}

// 处理矩阵行
int process_matrix_row(int mat[][4], int row)
{
    int sum = 0;
    int j   = 0;
    for (j = 0; j < 4; j = j + 1) { sum = sum + mat[row][j]; }
    return sum;
}

int main()
{
    // 局部数组
    int unused_local[5];                                     // 未使用的局部数组
    int local_array[4]    = {5, 6, 7, 8};                    // 完全使用的局部数组
    int partial_local[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};  // 部分使用的局部数组

    // 完全使用的数组
    int total = sum_array(fully_used_global, 3);
    total     = total + sum_array(local_array, 4);

    // 部分使用全局数组
    putint(partially_used_global[0]);  // 只用了第一个元素

    // 部分使用局部数组
    access_partial(partial_local, 2, 5);  // 只访问索引2到4

    // 修改数组
    modify_array(local_array, 4, 10);

    // 多维数组访问
    int row_sum = process_matrix_row(matrix, 1);
    putint(row_sum);

    // 间接索引访问
    int idx = getint();
    if (idx >= 0 && idx < 3) { putint(fully_used_global[idx]); }

    return 0;
}

/*
根据数组别名分析，这个程序中完全未使用的数组变量应该是:

unused_global_array - 全局数组，从未被访问
unused_local - 局部数组，从未被访问
此外，还有部分元素未被访问的数组:

partially_used_global - 只访问了索引0
partial_local - 只访问了索引2到4
matrix - 只访问了第1行（索引为1）
*/